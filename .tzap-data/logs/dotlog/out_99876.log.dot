digraph G {

	graph [bgcolor="#222222", fontcolor="white", fontname="Arial", fontsize=10];
    node [shape=box, style=filled, fillcolor="#3a3a3a", fontcolor="white", fontname="Arial", fontsize=10, color="#888888"];
    edge [color="#ffffff", fontcolor="white", fontname="Arial", fontsize=10];
"tzap_1" [label=<Connection (1) > ];
"tzap_2" [label=<MutateContext (2) > ];
"tzap_3" [label=<Work (3) > ];
"tzap_4" [label=<ApplyWorkflow () Start (4) > ];
"tzap_5" [label=<ApplyWorkflow (listInspirationFiles) Start (5) > ];
"tzap_6" [label=<Work (6) > ];
"tzap_7" [label=<ApplyWorkflow (listInspirationFiles) End (7) > ];
"tzap_8" [label=<ApplyWorkflow (inspirationWorkflow) Start (8) > ];
"tzap_9" [label=<ApplyWorkflow (inspirationWorkflow) End (9) > ];
"tzap_10" [label=<ApplyWorkflow (loadAndSearchEmbeddings) Start (10) > ];
"tzap_11" [label=<ApplyWorkflow (indexFilesAndEmbeddings) Start (11) > ];
"tzap_12" [label=<ApplyWorkflow (loadAndFetchEmbeddings) Start (12) > ];
"tzap_13" [label=<ApplyWorkflow (prepareEmbedFilesWorkflow) Start (13) > ];
"tzap_14" [label=<prepareEmbedFilesTzap (14) > ];
"tzap_15" [label=<ApplyWorkflow (prepareEmbedFilesWorkflow) End (15) > ];
"tzap_16" [label=<ApplyWorkflow (confirmEmbeddingSearch) Start (16) > ];
"tzap_17" [label=<ApplyWorkflow (confirmEmbeddingSearch) End (17) > ];
"tzap_18" [label=<ApplyWorkflow (fetchOrCachedEmbeddingForFilesWorkflow) Start (18) > ];
"tzap_19" [label=<fetchOrCachedEmbeddingForFilesTzap (19) > ];
"tzap_20" [label=<ApplyWorkflow (fetchOrCachedEmbeddingForFilesWorkflow) End (20) > ];
"tzap_21" [label=<ApplyWorkflow (saveAndLoadEmbeddingsToDB) Start (21) > ];
"tzap_22" [label=<ApplyWorkflow (saveAndLoadEmbeddingsToDB) End (22) > ];
"tzap_23" [label=<ApplyWorkflow (loadAndFetchEmbeddings) End (23) > ];
"tzap_24" [label=<ApplyWorkflow (indexFilesAndEmbeddings) End (24) > ];
"tzap_25" [label=<ApplyWorkflow (searchFilesWorkflow) Start (25) > ];
"tzap_26" [label=<searchResults (26) > ];
"tzap_27" [label=<ApplyWorkflow (searchFilesWorkflow) End (27) > ];
"tzap_28" [label=<ApplyWorkflow (loadAndSearchEmbeddings) End (28) > ];
"tzap_29" [label=<ApplyWorkflow (listInspirationFiles) Start (29) > ];
"tzap_30" [label=<Work (30) > ];
"tzap_31" [label=<ApplyWorkflow (listInspirationFiles) End (31) > ];
"tzap_32" [label=<ApplyWorkflow (SearchWorkflow) Start (32) > ];
"tzap_33" [label=<AddSystemMessage (33) <br/>Message:<br/>Role:system<br/>Content:<br/>The following file contents ar [...]> ];
"tzap_34" [label=<AddSystemMessage (34) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_35" [label=<AddSystemMessage (35) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_36" [label=<AddSystemMessage (36) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: promp [...]> ];
"tzap_37" [label=<AddSystemMessage (37) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: promp [...]> ];
"tzap_38" [label=<AddSystemMessage (38) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_39" [label=<AddSystemMessage (39) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_40" [label=<AddSystemMessage (40) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: forms [...]> ];
"tzap_41" [label=<AddSystemMessage (41) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: stati [...]> ];
"tzap_42" [label=<ApplyWorkflow (SearchWorkflow) End (42) > ];
"tzap_43" [label=<AddUserMessage (43) <br/>Message:<br/>Role:user<br/>Content:<br/>Can you modify the interaction [...]> ];
"tzap_44" [label=<requestChat (44) > ];
"tzap_45" [label=<ApplyWorkflow () End (45) > ];
"tzap_46" [label=<AddAssistantMessage (46) <br/>Message:<br/>Role:assistant<br/>Content:<br/>Sure, here is the modified cod [...]> ];
"tzap_47" [label=<Work (47) > ];
"tzap_48" [label=<ApplyWorkflow () Start (48) > ];
"tzap_49" [label=<ApplyWorkflow (listInspirationFiles) Start (49) > ];
"tzap_50" [label=<Work (50) > ];
"tzap_51" [label=<ApplyWorkflow (listInspirationFiles) End (51) > ];
"tzap_52" [label=<ApplyWorkflow (inspirationWorkflow) Start (52) > ];
"tzap_53" [label=<ApplyWorkflow (inspirationWorkflow) End (53) > ];
"tzap_54" [label=<ApplyWorkflow (loadAndSearchEmbeddings) Start (54) > ];
"tzap_55" [label=<ApplyWorkflow (indexFilesAndEmbeddings) Start (55) > ];
"tzap_56" [label=<ApplyWorkflow (loadAndFetchEmbeddings) Start (56) > ];
"tzap_57" [label=<ApplyWorkflow (prepareEmbedFilesWorkflow) Start (57) > ];
"tzap_58" [label=<prepareEmbedFilesTzap (58) > ];
"tzap_59" [label=<ApplyWorkflow (prepareEmbedFilesWorkflow) End (59) > ];
"tzap_60" [label=<ApplyWorkflow (confirmEmbeddingSearch) Start (60) > ];
"tzap_61" [label=<ApplyWorkflow (confirmEmbeddingSearch) End (61) > ];
"tzap_62" [label=<ApplyWorkflow (fetchOrCachedEmbeddingForFilesWorkflow) Start (62) > ];
"tzap_63" [label=<fetchOrCachedEmbeddingForFilesTzap (63) > ];
"tzap_64" [label=<ApplyWorkflow (fetchOrCachedEmbeddingForFilesWorkflow) End (64) > ];
"tzap_65" [label=<ApplyWorkflow (saveAndLoadEmbeddingsToDB) Start (65) > ];
"tzap_66" [label=<ApplyWorkflow (saveAndLoadEmbeddingsToDB) End (66) > ];
"tzap_67" [label=<ApplyWorkflow (loadAndFetchEmbeddings) End (67) > ];
"tzap_68" [label=<ApplyWorkflow (indexFilesAndEmbeddings) End (68) > ];
"tzap_69" [label=<ApplyWorkflow (searchFilesWorkflow) Start (69) > ];
"tzap_70" [label=<searchResults (70) > ];
"tzap_71" [label=<ApplyWorkflow (searchFilesWorkflow) End (71) > ];
"tzap_72" [label=<ApplyWorkflow (loadAndSearchEmbeddings) End (72) > ];
"tzap_73" [label=<ApplyWorkflow (listInspirationFiles) Start (73) > ];
"tzap_74" [label=<Work (74) > ];
"tzap_75" [label=<ApplyWorkflow (listInspirationFiles) End (75) > ];
"tzap_76" [label=<ApplyWorkflow (SearchWorkflow) Start (76) > ];
"tzap_77" [label=<AddSystemMessage (77) <br/>Message:<br/>Role:system<br/>Content:<br/>The following file contents ar [...]> ];
"tzap_78" [label=<AddSystemMessage (78) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_79" [label=<AddSystemMessage (79) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_80" [label=<AddSystemMessage (80) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: forms [...]> ];
"tzap_81" [label=<AddSystemMessage (81) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: conte [...]> ];
"tzap_82" [label=<AddSystemMessage (82) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_83" [label=<AddSystemMessage (83) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_84" [label=<AddSystemMessage (84) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: model [...]> ];
"tzap_85" [label=<AddSystemMessage (85) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: stati [...]> ];
"tzap_86" [label=<ApplyWorkflow (SearchWorkflow) End (86) > ];
"tzap_87" [label=<AddUserMessage (87) <br/>Message:<br/>Role:user<br/>Content:<br/>Can you modify the interaction [...]> ];
"tzap_88" [label=<AddAssistantMessage (88) <br/>Message:<br/>Role:assistant<br/>Content:<br/>Sure, here is the modified cod [...]> ];
"tzap_89" [label=<AddUserMessage (89) <br/>Message:<br/>Role:user<br/>Content:<br/>The URL needs to be relative t [...]> ];
"tzap_1" -> "tzap_2";
"tzap_2" -> "tzap_3";
"tzap_3" -> "tzap_4";
"tzap_4" -> "tzap_5";
"tzap_5" -> "tzap_6";
"tzap_5" -> "tzap_7";
"tzap_7" -> "tzap_8";
"tzap_8" -> "tzap_9";
"tzap_9" -> "tzap_10";
"tzap_10" -> "tzap_11";
"tzap_11" -> "tzap_12";
"tzap_12" -> "tzap_13";
"tzap_13" -> "tzap_14";
"tzap_14" -> "tzap_15";
"tzap_15" -> "tzap_16";
"tzap_16" -> "tzap_17";
"tzap_17" -> "tzap_18";
"tzap_18" -> "tzap_19";
"tzap_19" -> "tzap_20";
"tzap_20" -> "tzap_21";
"tzap_21" -> "tzap_22";
"tzap_22" -> "tzap_23";
"tzap_23" -> "tzap_24";
"tzap_24" -> "tzap_25";
"tzap_25" -> "tzap_26";
"tzap_26" -> "tzap_27";
"tzap_27" -> "tzap_28";
"tzap_28" -> "tzap_29";
"tzap_29" -> "tzap_30";
"tzap_29" -> "tzap_31";
"tzap_31" -> "tzap_32";
"tzap_32" -> "tzap_33";
"tzap_33" -> "tzap_34";
"tzap_34" -> "tzap_35";
"tzap_35" -> "tzap_36";
"tzap_36" -> "tzap_37";
"tzap_37" -> "tzap_38";
"tzap_38" -> "tzap_39";
"tzap_39" -> "tzap_40";
"tzap_40" -> "tzap_41";
"tzap_41" -> "tzap_42";
"tzap_42" -> "tzap_43";
"tzap_43" -> "tzap_44";
"tzap_44" -> "tzap_45";
"tzap_45" -> "tzap_46";
"tzap_2" -> "tzap_47";
"tzap_47" -> "tzap_48";
"tzap_48" -> "tzap_49";
"tzap_49" -> "tzap_50";
"tzap_49" -> "tzap_51";
"tzap_51" -> "tzap_52";
"tzap_52" -> "tzap_53";
"tzap_53" -> "tzap_54";
"tzap_54" -> "tzap_55";
"tzap_55" -> "tzap_56";
"tzap_56" -> "tzap_57";
"tzap_57" -> "tzap_58";
"tzap_58" -> "tzap_59";
"tzap_59" -> "tzap_60";
"tzap_60" -> "tzap_61";
"tzap_61" -> "tzap_62";
"tzap_62" -> "tzap_63";
"tzap_63" -> "tzap_64";
"tzap_64" -> "tzap_65";
"tzap_65" -> "tzap_66";
"tzap_66" -> "tzap_67";
"tzap_67" -> "tzap_68";
"tzap_68" -> "tzap_69";
"tzap_69" -> "tzap_70";
"tzap_70" -> "tzap_71";
"tzap_71" -> "tzap_72";
"tzap_72" -> "tzap_73";
"tzap_73" -> "tzap_74";
"tzap_73" -> "tzap_75";
"tzap_75" -> "tzap_76";
"tzap_76" -> "tzap_77";
"tzap_77" -> "tzap_78";
"tzap_78" -> "tzap_79";
"tzap_79" -> "tzap_80";
"tzap_80" -> "tzap_81";
"tzap_81" -> "tzap_82";
"tzap_82" -> "tzap_83";
"tzap_83" -> "tzap_84";
"tzap_84" -> "tzap_85";
"tzap_85" -> "tzap_86";
"tzap_86" -> "tzap_87";
"tzap_87" -> "tzap_88";
"tzap_88" -> "tzap_89";
"tzap_33" -> "chat_0_msg_0" [style=dotted];
"tzap_34" -> "chat_0_msg_1" [style=dotted];
"chat_0_msg_0" -> "chat_0_msg_1" [style=dotted];
"tzap_35" -> "chat_0_msg_2" [style=dotted];
"chat_0_msg_1" -> "chat_0_msg_2" [style=dotted];
"tzap_36" -> "chat_0_msg_3" [style=dotted];
"chat_0_msg_2" -> "chat_0_msg_3" [style=dotted];
"tzap_37" -> "chat_0_msg_4" [style=dotted];
"chat_0_msg_3" -> "chat_0_msg_4" [style=dotted];
"tzap_38" -> "chat_0_msg_5" [style=dotted];
"chat_0_msg_4" -> "chat_0_msg_5" [style=dotted];
"tzap_39" -> "chat_0_msg_6" [style=dotted];
"chat_0_msg_5" -> "chat_0_msg_6" [style=dotted];
"tzap_40" -> "chat_0_msg_7" [style=dotted];
"chat_0_msg_6" -> "chat_0_msg_7" [style=dotted];
"tzap_41" -> "chat_0_msg_8" [style=dotted];
"chat_0_msg_7" -> "chat_0_msg_8" [style=dotted];
"chat_0_msg_9" -> "tzap_43" [style=dotted];
"chat_0_msg_8" -> "chat_0_msg_9" [style=dotted];
"tzap_77" -> "chat_1_msg_0" [style=dotted];
"tzap_78" -> "chat_1_msg_1" [style=dotted];
"chat_1_msg_0" -> "chat_1_msg_1" [style=dotted];
"tzap_79" -> "chat_1_msg_2" [style=dotted];
"chat_1_msg_1" -> "chat_1_msg_2" [style=dotted];
"tzap_80" -> "chat_1_msg_3" [style=dotted];
"chat_1_msg_2" -> "chat_1_msg_3" [style=dotted];
"tzap_81" -> "chat_1_msg_4" [style=dotted];
"chat_1_msg_3" -> "chat_1_msg_4" [style=dotted];
"tzap_82" -> "chat_1_msg_5" [style=dotted];
"chat_1_msg_4" -> "chat_1_msg_5" [style=dotted];
"tzap_83" -> "chat_1_msg_6" [style=dotted];
"chat_1_msg_5" -> "chat_1_msg_6" [style=dotted];
"tzap_84" -> "chat_1_msg_7" [style=dotted];
"chat_1_msg_6" -> "chat_1_msg_7" [style=dotted];
"tzap_85" -> "chat_1_msg_8" [style=dotted];
"chat_1_msg_7" -> "chat_1_msg_8" [style=dotted];
"tzap_87" -> "chat_1_msg_9" [style=dotted];
"chat_1_msg_8" -> "chat_1_msg_9" [style=dotted];
"tzap_88" -> "chat_1_msg_10" [style=dotted];
"chat_1_msg_9" -> "chat_1_msg_10" [style=dotted];
"chat_1_msg_11" -> "tzap_89" [style=dotted];
"chat_1_msg_10" -> "chat_1_msg_11" [style=dotted];

	subgraph cluster_chat_0 {
		label = "GPT Chat(0):";
		bgcolor = "#333333";

	subgraph cluster_chat_0_REQUEST {
		label = "REQUEST";
		bgcolor = "#333333";
		"chat_0_msg_0" [label=<Message Tokens(11) (0):<br/>Role: system<br/>The following file contents are embeddings for the user input:> , tooltip=<The following file contents are embeddings for the user input:> ];
		"chat_0_msg_1" [label=<Message Tokens(621) (1):<br/>Role: system<br/>####embedding from file: routes/interaction.py<br/>from flask import Blueprint, request, redirect, url_for, current_app<br/>import csv<br/># import Flask and other libraries<br/>from flask import render_template<br/>from forms.interaction_form import InteractionForm<br/>from models.models import Recipient, Sender, Campaign> , tooltip=<####embedding from file: routes/interaction.py
from flask import Blueprint, request, redirect, url_for, current_app
import csv
# import Flask and other libraries
from flask import render_template
from forms.interaction_form import InteractionForm
from models.models import Recipient, Sender, Campaign, Interaction, InteractionStatus
from context.constants import INTERACTION_TYPES
from tools.utility import add_llm_response_to_conversation, initialize_conversation
from context.database import db
from logs.logger import get_logger
import logging
# Import the functions from the other files
import io


interaction_bp = Blueprint(&#39;interaction&#39;, __name__)
logger = get_logger()

@interaction_bp.route(&#39;/interaction/\&lt;last_action\&gt;&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])
def interaction(last_action):
    try:
        print(\&#34;Inside interaction route\&#34;)
        logging.info(\&#34;Inside interaction route with logging.info\&#34;)
        print(\&#34;Inside interaction route with print\&#34;)
        print(\&#34;This should be an error message\&#34;)
        print(\&#34;This should be a debug message\&#34;) 
        print(\&#34;This should be an info message\&#34;)
        print(\&#34;Processing Interaction form...\&#34;)
        print(\&#34;Test debug message\&#34;)

        # Create instance of InteractionForm class
        form = InteractionForm()

        # When the form is submitted
        if form.validate_on_submit():
            
            # The CSV file should have a header row and the following columns:
            # - Recipient Name: The name of the recipient
            # - Recipient Information: Additional information about the recipient (facts about the recipient, etc.)
            # - Phone Number: The phone number of the recipient (in E.164 format)
            # Example:
            # Recipient Name,Recipient Information,Phone Number
            # John Doe,John has never voted as a tech enthusist who lives in GA,+14155552671
            # Jane Smith,Jane has recently become a US citizen and cares about animal rights,jane.smith@example.com,+14155552672
            
            # If a CSV file was uploaded
            if &#39;recipient_csv&#39; in request.files:

                # Read the CSV data from the uploaded file
                file = form.recipient_csv.data
                text_file = io.TextIOWrapper(file, encoding=&#39;utf-8&#39;)
                csv_data = csv.reader(text_file, delimiter=&#39;,&#39;)

                # We expect the first row to be headers, so we get those first
                headers = next(csv_data)

                interactions = []

                # Then we process each row in the CSV
                for row in csv_data:
                    # Create an interaction from the row
                    interaction = create_interaction_from_csv_row(headers, row, form)
                    interactions.append(interaction)

                # Process each interaction
                for interaction in interactions:
                    initialize_interaction(interaction)   
                
                sender = Sender.query.get(interaction.sender_id)
                #reroute to the confirm messages page
                return redirect(url_for(&#39;bp.confirm_messages&#39;, sender_id=sender.id))
            else:
                print(f\&#34;No form subdmitted.> ];
		"chat_0_msg_2" [label=<Message Tokens(831) (2):<br/>Role: system<br/>####embedding from file: routes/interaction.py<br/> a new interaction with a recipient and the first system message in the conversation. Does not send the message.<br/>def initialize_interaction(interaction):<br/>    interaction_type = interaction.interaction_type<br/><br/>    system_prompt = INTERACTION_TYPES[interact> , tooltip=<####embedding from file: routes/interaction.py
 a new interaction with a recipient and the first system message in the conversation. Does not send the message.
def initialize_interaction(interaction):
    interaction_type = interaction.interaction_type

    system_prompt = INTERACTION_TYPES[interaction_type].system_initialization_method(interaction)

    user_number = interaction.recipient.recipient_phone_number
    sender_number = interaction.sender.sender_phone_number

    # Pre-create the first response
    conversation = initialize_conversation(system_prompt)
    interaction.conversation = conversation
    initial_statement = add_llm_response_to_conversation(interaction)
    print(\&#34;Interaction created successfully\&#34;)
    interaction.interaction_status = InteractionStatus.INITIALIZED

    db.session.commit()

    # Log the system prompt and user number
    print(\&#34;Interaction Type: %s\&#34;, interaction_type)
    print(f\&#34;System prompt: system_prompt\&#34;)
    print(f\&#34;User number: user_number\&#34;)
    print(f\&#34;Sender number: sender_number\&#34;)
    print(f\&#34;Initial Statement:> ];
		"chat_0_msg_3" [label=<Message Tokens(1043) (3):<br/>Role: system<br/>####embedding from file: prompts/communication_review_agent.py<br/>from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate<br/>from models.models import Interaction<br/><br/><br/>def get_campaign_phone_call_system_prompt(interaction: Interaction):<br/>    # GPT API System Prompts<br/>    system_prompt = &> , tooltip=<####embedding from file: prompts/communication_review_agent.py
from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate
from models.models import Interaction


def get_campaign_phone_call_system_prompt(interaction: Interaction):
    # GPT API System Prompts
    system_prompt = &#39;&#39;&#39;You are a helpful agent reaching out to recipient_name on behalf of sender_name Keep your comments short, but welcoming. Please respond with 1 or 2 sentences and be brief. Your responses should be concise, informative, and engaging. If the recipient is losing interest in the conversation or has no more questions, include \&#34;goodbye\&#34; in your response to mark the end of the communication.

The sender wants you to reach out to the recipient for the following reason:
campaign_information

The campaign is going to end on you can reach out to the recipient until campaign_end_date.

You know the following about the sender of the message:
sender_information

You know the following about the recipient of the message:
recipient_information

Begin> ];
		"chat_0_msg_4" [label=<Message Tokens(1256) (4):<br/>Role: system<br/>####embedding from file: prompts/campaign_volunteer_agent.py<br/>from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate<br/>from models.models import Interaction<br/><br/>def get_campaign_phone_call_system_prompt(interaction: Interaction):<br/><br/>    # GPT API System Prompts<br/>    system_prompt = &#3> , tooltip=<####embedding from file: prompts/campaign_volunteer_agent.py
from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate
from models.models import Interaction

def get_campaign_phone_call_system_prompt(interaction: Interaction):

    # GPT API System Prompts
    system_prompt = &#39;&#39;&#39;You are a helpful agent reaching out to recipient_name on behalf of sender_name Keep your comments short, but welcoming. Please respond with 1 or 2 sentences and be brief. Your responses should be concise, informative, and engaging. If the recipient is losing interest in the conversation or has no more questions, include \&#34;goodbye\&#34; in your response to mark the end of the communication.

The sender wants you to reach out to the recipient for the following reason:
campaign_information

The campaign is going to end on you can reach out to the recipient until campaign_end_date.

You know the following about the sender of the message:
sender_information

You know the following about the recipient of the message:
recipient_information

Begin> ];
		"chat_0_msg_5" [label=<Message Tokens(1466) (5):<br/>Role: system<br/>####embedding from file: routes/call.py<br/>from flask import Blueprint<br/># import Flask and other libraries<br/>from flask import render_template, redirect, url_for, session<br/>from forms.interaction_form import InteractionForm<br/>from models.models import Recipient, Sender, Interaction<br/># from logs.logger import l> , tooltip=<####embedding from file: routes/call.py
from flask import Blueprint
# import Flask and other libraries
from flask import render_template, redirect, url_for, session
from forms.interaction_form import InteractionForm
from models.models import Recipient, Sender, Interaction
# from logs.logger import logger
from context.database import db
from context.apis import client, call_webhook_url, twilio_number

call_bp = Blueprint(&#39;call&#39;, __name__)

@call_bp.route(\&#34;/call/\&lt;interaction_id\&gt;\&#34;, methods=[&#39;POST&#39;, &#39;GET&#39;])
def call(interaction_id):
    try:
        recipient_call = Interaction.query.get(session[&#39;interaction_id&#39;])
        recipient = Recipient.query.get(recipient_call.recipient_id)
        sender = Sender.query.get(recipient_call.sender_id)

        # Clear the session data now that we&#39;re done with it
        if &#39;interaction_id&#39; in session:
            del session[&#39;interaction_id&#39;]

        print(
            f\&#34;Starting call with system prompt &#39;recipient_call.conversation[0].get(&#39;content> ];
		"chat_0_msg_6" [label=<Message Tokens(1565) (6):<br/>Role: system<br/>####embedding from file: routes/confirm_messages.py<br/>        print(\&#34;Redirecting to interaction page with error message\&#34;)<br/>        return redirect(url_for(&#39;bp.interaction&#39;, last_action=&#39;sender_not_found&#39;))<br/><br/>    # log the name of the sender and the number of interactions to be > , tooltip=<####embedding from file: routes/confirm_messages.py
        print(\&#34;Redirecting to interaction page with error message\&#34;)
        return redirect(url_for(&#39;bp.interaction&#39;, last_action=&#39;sender_not_found&#39;))

    # log the name of the sender and the number of interactions to be confirmed
    print(f\&#34;Sender sender.sender_name has len(interactions) interactions to confirm\&#34;)

    return render_template(&#39;confirm_message.html&#39;,
                           interactions=interactions, interaction_types=INTERACTION_TYPES)> ];
		"chat_0_msg_7" [label=<Message Tokens(1724) (7):<br/>Role: system<br/>####embedding from file: forms/interaction_form.py<br/> validators=[DataRequired()])<br/>    sender_information = TextAreaField(&#39;Sender Information&#39;,<br/>                                          validators=[DataRequired()])<br/>    sender_phone_number = SelectField(&#39;Sender Number&#39;, choices=[(number> , tooltip=<####embedding from file: forms/interaction_form.py
 validators=[DataRequired()])
    sender_information = TextAreaField(&#39;Sender Information&#39;,
                                          validators=[DataRequired()])
    sender_phone_number = SelectField(&#39;Sender Number&#39;, choices=[(number, number) for number in AVAILABLE_PHONE_NUMBERS], validators=[DataRequired()])
    campaign_end_date = DateField(&#39;End Date&#39;, validators=[DataRequired()])
    
    interaction_type_choices = [(str(interaction_type), interaction_type) for interaction_type in INTERACTION_TYPES.values()]

    interaction_type = SelectField(&#39;Interaction Type&#39;,
                               choices=interaction_type_choices,
                               validators=[DataRequired()])
    
    recipient_csv = FileField(&#39;Upload Recipients CSV&#39;)  # This is the new field for uploading CSVs

    submit = SubmitField(&#39;Submit&#39;)> ];
		"chat_0_msg_8" [label=<Message Tokens(1899) (8):<br/>Role: system<br/>####embedding from file: static/js/interactions.js<br/>function sendInteraction(button) <br/>  var url = button.getAttribute(\&#34;data-url\&#34;);<br/>  var interactionId = button.getAttribute(\&#34;data-interaction-id\&#34;);<br/>  console.log(interactionId);<br/>  console.log(url);  <br/><br/>  // Update interaction status<br/>> , tooltip=<####embedding from file: static/js/interactions.js
function sendInteraction(button) 
  var url = button.getAttribute(\&#34;data-url\&#34;);
  var interactionId = button.getAttribute(\&#34;data-interaction-id\&#34;);
  console.log(interactionId);
  console.log(url);  

  // Update interaction status
  fetch(url,  
    method: \&#34;POST\&#34;,
    headers: 
      \&#34;Content-Type\&#34;: \&#34;application/json\&#34;
    ,
    body: JSON.stringify( interaction_status: \&#34;InteractionStatus.HUMAN_CONFIRMED\&#34; )
  )
  .then(function(response) 
    if (response.status != 200) 
      button.innerText = \&#34;Error\&#34;;
     else 
      button.innerText = \&#34;Sent\&#34;;
    
    button.disabled = true;
  )
  .catch(function(error) 
    button.innerText = \&#34;Error\&#34;;
    button.disabled = true;
  );
> ];
	}

	subgraph cluster_chat_0_RESPONSE {
		label = "RESPONSE";
		bgcolor = "#333333";
		"chat_0_msg_9" [label=<Message Tokens(49) (9):<br/>Role: user<br/>Can you modify the interactions.js file so that it constructs the url from this button:nteraction-id= interaction.id  data-interaction-type= interaction.interaction_type \&gt;Send\&lt;/button\&gt;. The url format should be interaction_type/interaction_id> , tooltip=<Can you modify the interactions.js file so that it constructs the url from this button:nteraction-id= interaction.id  data-interaction-type= interaction.interaction_type \&gt;Send\&lt;/button\&gt;. The url format should be interaction_type/interaction_id> ];
	}
	}

	subgraph cluster_chat_1 {
		label = "GPT Chat(1):";
		bgcolor = "#333333";

	subgraph cluster_chat_1_REQUEST {
		label = "REQUEST";
		bgcolor = "#333333";
		"chat_1_msg_0" [label=<Message Tokens(11) (0):<br/>Role: system<br/>The following file contents are embeddings for the user input:> , tooltip=<The following file contents are embeddings for the user input:> ];
		"chat_1_msg_1" [label=<Message Tokens(621) (1):<br/>Role: system<br/>####embedding from file: routes/interaction.py<br/>from flask import Blueprint, request, redirect, url_for, current_app<br/>import csv<br/># import Flask and other libraries<br/>from flask import render_template<br/>from forms.interaction_form import InteractionForm<br/>from models.models import Recipient, Sender, Campaign> , tooltip=<####embedding from file: routes/interaction.py
from flask import Blueprint, request, redirect, url_for, current_app
import csv
# import Flask and other libraries
from flask import render_template
from forms.interaction_form import InteractionForm
from models.models import Recipient, Sender, Campaign, Interaction, InteractionStatus
from context.constants import INTERACTION_TYPES
from tools.utility import add_llm_response_to_conversation, initialize_conversation
from context.database import db
from logs.logger import get_logger
import logging
# Import the functions from the other files
import io


interaction_bp = Blueprint(&#39;interaction&#39;, __name__)
logger = get_logger()

@interaction_bp.route(&#39;/interaction/\&lt;last_action\&gt;&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])
def interaction(last_action):
    try:
        print(\&#34;Inside interaction route\&#34;)
        logging.info(\&#34;Inside interaction route with logging.info\&#34;)
        print(\&#34;Inside interaction route with print\&#34;)
        print(\&#34;This should be an error message\&#34;)
        print(\&#34;This should be a debug message\&#34;) 
        print(\&#34;This should be an info message\&#34;)
        print(\&#34;Processing Interaction form...\&#34;)
        print(\&#34;Test debug message\&#34;)

        # Create instance of InteractionForm class
        form = InteractionForm()

        # When the form is submitted
        if form.validate_on_submit():
            
            # The CSV file should have a header row and the following columns:
            # - Recipient Name: The name of the recipient
            # - Recipient Information: Additional information about the recipient (facts about the recipient, etc.)
            # - Phone Number: The phone number of the recipient (in E.164 format)
            # Example:
            # Recipient Name,Recipient Information,Phone Number
            # John Doe,John has never voted as a tech enthusist who lives in GA,+14155552671
            # Jane Smith,Jane has recently become a US citizen and cares about animal rights,jane.smith@example.com,+14155552672
            
            # If a CSV file was uploaded
            if &#39;recipient_csv&#39; in request.files:

                # Read the CSV data from the uploaded file
                file = form.recipient_csv.data
                text_file = io.TextIOWrapper(file, encoding=&#39;utf-8&#39;)
                csv_data = csv.reader(text_file, delimiter=&#39;,&#39;)

                # We expect the first row to be headers, so we get those first
                headers = next(csv_data)

                interactions = []

                # Then we process each row in the CSV
                for row in csv_data:
                    # Create an interaction from the row
                    interaction = create_interaction_from_csv_row(headers, row, form)
                    interactions.append(interaction)

                # Process each interaction
                for interaction in interactions:
                    initialize_interaction(interaction)   
                
                sender = Sender.query.get(interaction.sender_id)
                #reroute to the confirm messages page
                return redirect(url_for(&#39;bp.confirm_messages&#39;, sender_id=sender.id))
            else:
                print(f\&#34;No form subdmitted.> ];
		"chat_1_msg_2" [label=<Message Tokens(831) (2):<br/>Role: system<br/>####embedding from file: routes/call.py<br/>from flask import Blueprint<br/># import Flask and other libraries<br/>from flask import render_template, redirect, url_for, session<br/>from forms.interaction_form import InteractionForm<br/>from models.models import Recipient, Sender, Interaction<br/># from logs.logger import l> , tooltip=<####embedding from file: routes/call.py
from flask import Blueprint
# import Flask and other libraries
from flask import render_template, redirect, url_for, session
from forms.interaction_form import InteractionForm
from models.models import Recipient, Sender, Interaction
# from logs.logger import logger
from context.database import db
from context.apis import client, call_webhook_url, twilio_number

call_bp = Blueprint(&#39;call&#39;, __name__)

@call_bp.route(\&#34;/call/\&lt;interaction_id\&gt;\&#34;, methods=[&#39;POST&#39;, &#39;GET&#39;])
def call(interaction_id):
    try:
        recipient_call = Interaction.query.get(session[&#39;interaction_id&#39;])
        recipient = Recipient.query.get(recipient_call.recipient_id)
        sender = Sender.query.get(recipient_call.sender_id)

        # Clear the session data now that we&#39;re done with it
        if &#39;interaction_id&#39; in session:
            del session[&#39;interaction_id&#39;]

        print(
            f\&#34;Starting call with system prompt &#39;recipient_call.conversation[0].get(&#39;content> ];
		"chat_1_msg_3" [label=<Message Tokens(1042) (3):<br/>Role: system<br/>####embedding from file: forms/interaction_form.py<br/>from flask_wtf import FlaskForm<br/>from wtforms import StringField, SubmitField, DateField, SelectField, FileField<br/>from wtforms.validators import DataRequired, Regexp<br/>from wtforms import TextAreaField<br/>from context.constants import INTERACTION_TYPES, AV> , tooltip=<####embedding from file: forms/interaction_form.py
from flask_wtf import FlaskForm
from wtforms import StringField, SubmitField, DateField, SelectField, FileField
from wtforms.validators import DataRequired, Regexp
from wtforms import TextAreaField
from context.constants import INTERACTION_TYPES, AVAILABLE_PHONE_NUMBERS

# Define a custom validator for phone numbers that match \&#34;+17066641258\&#34;
class PhoneNumberValidator(Regexp):

    def __init__(self):
        super().__init__(
            # The regular expression to match phone numbers
            r&#39;^\\+[1-9]\\d10$&#39;,
            # The error message to display if the phone number is invalid
            message=
            &#39;The phone number must be in the format +######### with the country code included&#39;
        )


class InteractionForm(FlaskForm):
    campaign_name = StringField(&#39;Campaign Name&#39;, validators=[DataRequired()])
    campaign_information = TextAreaField(&#39;Campaign Information&#39;,
                                     validators=[DataRequired()])
    sender_name = StringField(&#39;Sender Name&#39;,> ];
		"chat_1_msg_4" [label=<Message Tokens(1171) (4):<br/>Role: system<br/>####embedding from file: context/constants.py<br/>from models.models import SendingPhoneNumber, InteractionType<br/>from routes.text_message import text_message<br/>from prompts.campaign_volunteer_agent import get_campaign_text_message_system_prompt<br/>from context.apis import twilio_numbers<br/><br/>AVAILABLE_PHONE_NUMBE> , tooltip=<####embedding from file: context/constants.py
from models.models import SendingPhoneNumber, InteractionType
from routes.text_message import text_message
from prompts.campaign_volunteer_agent import get_campaign_text_message_system_prompt
from context.apis import twilio_numbers

AVAILABLE_PHONE_NUMBERS = [
    SendingPhoneNumber(country_code=number[:2], phone_number_after_code=number[2:]).get_full_phone_number() for number in twilio_numbers
]

INTERACTION_TYPES = 
    \&#34;text_message\&#34;: InteractionType(name=\&#34;text_message\&#34;, method=text_message, system_initialization_method=get_campaign_text_message_system_prompt),


STATIC_FOLDER = \&#34;../static\&#34;> ];
		"chat_1_msg_5" [label=<Message Tokens(1288) (5):<br/>Role: system<br/>####embedding from file: routes/blueprint.py<br/>POST&#39;])<br/>bp.add_url_rule(\&#34;/text_message/\&lt;interaction_id\&gt;\&#34;, view_func=text_message, methods=[&#39;POST&#39;])<br/>bp.add_url_rule(\&#34;/plan/\&lt;int:recipient_id\&gt;\&#34;, view_func=plan, methods=[&#39;POST&#39;])<br/>bp.add_url_rule(\&#34> , tooltip=<####embedding from file: routes/blueprint.py
POST&#39;])
bp.add_url_rule(\&#34;/text_message/\&lt;interaction_id\&gt;\&#34;, view_func=text_message, methods=[&#39;POST&#39;])
bp.add_url_rule(\&#34;/plan/\&lt;int:recipient_id\&gt;\&#34;, view_func=plan, methods=[&#39;POST&#39;])
bp.add_url_rule(\&#34;/\&lt;int:sender_id\&gt;/confirm_messages\&#34;, view_func=confirm_messages, methods=[&#39;GET&#39;, &#39;POST&#39;])

# add a url for static/js/\&lt;filename\&gt; to serve the javascript files
bp.add_url_rule(&#39;/static/js/\&lt;filename\&gt;&#39;, endpoint=&#39;static/js&#39;, view_func=send_js)> ];
		"chat_1_msg_6" [label=<Message Tokens(1363) (6):<br/>Role: system<br/>####embedding from file: routes/index.py<br/>from flask import Blueprint<br/># import Flask and other libraries<br/>from flask import redirect, url_for<br/><br/>index_bp = Blueprint(&#39;index&#39;, __name__)<br/><br/>@index_bp.route(\&#34;/\&#34;, methods=[&#39;GET&#39;, &#39;POST&#39;])<br/>def index():<br/>    return redirect(<br/>    > , tooltip=<####embedding from file: routes/index.py
from flask import Blueprint
# import Flask and other libraries
from flask import redirect, url_for

index_bp = Blueprint(&#39;index&#39;, __name__)

@index_bp.route(\&#34;/\&#34;, methods=[&#39;GET&#39;, &#39;POST&#39;])
def index():
    return redirect(
        url_for(&#39;bp.interaction&#39;, last_action=\&#34;LoadingServerForTheFirstTime\&#34;))> ];
		"chat_1_msg_7" [label=<Message Tokens(1546) (7):<br/>Role: system<br/>####embedding from file: models/models.py<br/>)<br/><br/>    # Add relationship<br/>    interactions = relationship(&#39;Interaction&#39;,<br/>                                  backref=&#39;campaign&#39;,<br/>                                  lazy=True)<br/><br/><br/>class Interaction(db.Model):<br/>    id = db.Column(db.Integer, primary_> , tooltip=<####embedding from file: models/models.py
)

    # Add relationship
    interactions = relationship(&#39;Interaction&#39;,
                                  backref=&#39;campaign&#39;,
                                  lazy=True)


class Interaction(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    twilio_conversation_sid = db.Column(db.String(50))
    conversation = db.Column(db.JSON())
    interaction_type = db.Column(db.String(50))
    interaction_goal = db.Column(db.Text)
    recipient_id = db.Column(db.Integer, db.ForeignKey(&#39;recipient.id&#39;))
    sender_id = db.Column(db.Integer, db.ForeignKey(&#39;sender.id&#39;))
    campaign_id = db.Column(db.Integer, db.ForeignKey(&#39;campaign.id&#39;))
    recipient_outreach_schedule = db.Column(db.JSON())
    interaction_status = db.Column(db.String(50)) #initialized, human_confirmed, sent

    # Relationships are set up in Recipient, Sender, and CampaignContext models> ];
		"chat_1_msg_8" [label=<Message Tokens(1754) (8):<br/>Role: system<br/>####embedding from file: static/js/interactions.js<br/>function sendInteraction(button) <br/>    var interactionId = button.getAttribute(\&#34;data-interaction-id\&#34;);<br/>    console.log(\&#34;Interaction ID: \&#34; + interactionId);<br/>    var interactionType = button.getAttribute(\&#34;data-interaction-type\> , tooltip=<####embedding from file: static/js/interactions.js
function sendInteraction(button) 
    var interactionId = button.getAttribute(\&#34;data-interaction-id\&#34;);
    console.log(\&#34;Interaction ID: \&#34; + interactionId);
    var interactionType = button.getAttribute(\&#34;data-interaction-type\&#34;);
    console.log(\&#34;Interaction Type: \&#34; + interactionType);
    var url = interactionType + &#39;/&#39; + interactionId;
    console.log(url);
  
    // Update interaction status
    fetch(url,  
      method: \&#34;POST\&#34;,
      headers: 
        \&#34;Content-Type\&#34;: \&#34;application/json\&#34;
      ,
      body: JSON.stringify( interaction_status: \&#34;InteractionStatus.HUMAN_CONFIRMED\&#34; )
    )
    .then(function(response) 
      if (response.status != 200) 
        button.innerText = \&#34;Error\&#34;;
       else 
        button.innerText = \&#34;Sent\&#34;;
      
      button.disabled = true;
    )
    .catch(function(error) 
      button.innerText = \&#34;Error\&#34;;
      button.disabled = true;
    );
  > ];
		"chat_1_msg_9" [label=<Message Tokens(1803) (9):<br/>Role: user<br/>Can you modify the interactions.js file so that it constructs the url from this button:nteraction-id= interaction.id  data-interaction-type= interaction.interaction_type \&gt;Send\&lt;/button\&gt;. The url format should be interaction_type/interaction_id> , tooltip=<Can you modify the interactions.js file so that it constructs the url from this button:nteraction-id= interaction.id  data-interaction-type= interaction.interaction_type \&gt;Send\&lt;/button\&gt;. The url format should be interaction_type/interaction_id> ];
		"chat_1_msg_10" [label=<Message Tokens(2017) (10):<br/>Role: assistant<br/>Sure, here is the modified code:<br/><br/>```javascript<br/>function sendInteraction(button) <br/>  var interactionId = button.getAttribute(\&#34;data-interaction-id\&#34;);<br/>  var interactionType = button.getAttribute(\&#34;data-interaction-type\&#34;);<br/>  var url = interactionType + &#39;/&#39; + interactionId;<br/>  c> , tooltip=<Sure, here is the modified code:

```javascript
function sendInteraction(button) 
  var interactionId = button.getAttribute(\&#34;data-interaction-id\&#34;);
  var interactionType = button.getAttribute(\&#34;data-interaction-type\&#34;);
  var url = interactionType + &#39;/&#39; + interactionId;
  console.log(url);

  // Update interaction status
  fetch(url,  
    method: \&#34;POST\&#34;,
    headers: 
      \&#34;Content-Type\&#34;: \&#34;application/json\&#34;
    ,
    body: JSON.stringify( interaction_status: \&#34;InteractionStatus.HUMAN_CONFIRMED\&#34; )
  )
  .then(function(response) 
    if (response.status != 200) 
      button.innerText = \&#34;Error\&#34;;
     else 
      button.innerText = \&#34;Sent\&#34;;
    
    button.disabled = true;
  )
  .catch(function(error) 
    button.innerText = \&#34;Error\&#34;;
    button.disabled = true;
  );

```

This code will extract the `interactionId` and `interactionType` from the button attributes and use them to construct the URL in the format you specified.> ];
	}

	subgraph cluster_chat_1_RESPONSE {
		label = "RESPONSE";
		bgcolor = "#333333";
		"chat_1_msg_11" [label=<Message Tokens(46) (11):<br/>Role: user<br/>The URL needs to be relative to the local application. E.g. if I&#39;m at localhost.com this url should be localhost.com/interaction_type/interaction_id. This is returning just the \&#34;/interaction_type/interaction_id\&#34; part> , tooltip=<The URL needs to be relative to the local application. E.g. if I&#39;m at localhost.com this url should be localhost.com/interaction_type/interaction_id. This is returning just the \&#34;/interaction_type/interaction_id\&#34; part> ];
	}
	}
}
