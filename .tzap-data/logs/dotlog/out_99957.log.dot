digraph G {

	graph [bgcolor="#222222", fontcolor="white", fontname="Arial", fontsize=10];
    node [shape=box, style=filled, fillcolor="#3a3a3a", fontcolor="white", fontname="Arial", fontsize=10, color="#888888"];
    edge [color="#ffffff", fontcolor="white", fontname="Arial", fontsize=10];
"tzap_1" [label=<Connection (1) > ];
"tzap_2" [label=<MutateContext (2) > ];
"tzap_3" [label=<Work (3) > ];
"tzap_4" [label=<ApplyWorkflow () Start (4) > ];
"tzap_5" [label=<ApplyWorkflow (listInspirationFiles) Start (5) > ];
"tzap_6" [label=<Work (6) > ];
"tzap_7" [label=<ApplyWorkflow (listInspirationFiles) End (7) > ];
"tzap_8" [label=<ApplyWorkflow (inspirationWorkflow) Start (8) > ];
"tzap_9" [label=<ApplyWorkflow (inspirationWorkflow) End (9) > ];
"tzap_10" [label=<ApplyWorkflow (loadAndSearchEmbeddings) Start (10) > ];
"tzap_11" [label=<ApplyWorkflow (indexFilesAndEmbeddings) Start (11) > ];
"tzap_12" [label=<ApplyWorkflow (loadAndFetchEmbeddings) Start (12) > ];
"tzap_13" [label=<ApplyWorkflow (prepareEmbedFilesWorkflow) Start (13) > ];
"tzap_14" [label=<prepareEmbedFilesTzap (14) > ];
"tzap_15" [label=<ApplyWorkflow (prepareEmbedFilesWorkflow) End (15) > ];
"tzap_16" [label=<ApplyWorkflow (confirmEmbeddingSearch) Start (16) > ];
"tzap_17" [label=<ApplyWorkflow (confirmEmbeddingSearch) End (17) > ];
"tzap_18" [label=<ApplyWorkflow (fetchOrCachedEmbeddingForFilesWorkflow) Start (18) > ];
"tzap_19" [label=<fetchOrCachedEmbeddingForFilesTzap (19) > ];
"tzap_20" [label=<ApplyWorkflow (fetchOrCachedEmbeddingForFilesWorkflow) End (20) > ];
"tzap_21" [label=<ApplyWorkflow (saveAndLoadEmbeddingsToDB) Start (21) > ];
"tzap_22" [label=<ApplyWorkflow (saveAndLoadEmbeddingsToDB) End (22) > ];
"tzap_23" [label=<ApplyWorkflow (loadAndFetchEmbeddings) End (23) > ];
"tzap_24" [label=<ApplyWorkflow (indexFilesAndEmbeddings) End (24) > ];
"tzap_25" [label=<ApplyWorkflow (searchFilesWorkflow) Start (25) > ];
"tzap_26" [label=<searchResults (26) > ];
"tzap_27" [label=<ApplyWorkflow (searchFilesWorkflow) End (27) > ];
"tzap_28" [label=<ApplyWorkflow (loadAndSearchEmbeddings) End (28) > ];
"tzap_29" [label=<ApplyWorkflow (listInspirationFiles) Start (29) > ];
"tzap_30" [label=<Work (30) > ];
"tzap_31" [label=<ApplyWorkflow (listInspirationFiles) End (31) > ];
"tzap_32" [label=<ApplyWorkflow (SearchWorkflow) Start (32) > ];
"tzap_33" [label=<AddSystemMessage (33) <br/>Message:<br/>Role:system<br/>Content:<br/>The following file contents ar [...]> ];
"tzap_34" [label=<AddSystemMessage (34) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: logs/ [...]> ];
"tzap_35" [label=<AddSystemMessage (35) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_36" [label=<AddSystemMessage (36) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_37" [label=<AddSystemMessage (37) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: tools [...]> ];
"tzap_38" [label=<AddSystemMessage (38) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_39" [label=<AddSystemMessage (39) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: promp [...]> ];
"tzap_40" [label=<AddSystemMessage (40) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: promp [...]> ];
"tzap_41" [label=<AddSystemMessage (41) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_42" [label=<AddSystemMessage (42) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_43" [label=<ApplyWorkflow (SearchWorkflow) End (43) > ];
"tzap_44" [label=<AddUserMessage (44) <br/>Message:<br/>Role:user<br/>Content:<br/>My logger does not appear to b [...]> ];
"tzap_45" [label=<requestChat (45) > ];
"tzap_46" [label=<ApplyWorkflow () End (46) > ];
"tzap_47" [label=<AddAssistantMessage (47) <br/>Message:<br/>Role:assistant<br/>Content:<br/>It is possible that the log me [...]> ];
"tzap_48" [label=<Work (48) > ];
"tzap_49" [label=<ApplyWorkflow () Start (49) > ];
"tzap_50" [label=<ApplyWorkflow (listInspirationFiles) Start (50) > ];
"tzap_51" [label=<Work (51) > ];
"tzap_52" [label=<ApplyWorkflow (listInspirationFiles) End (52) > ];
"tzap_53" [label=<ApplyWorkflow (inspirationWorkflow) Start (53) > ];
"tzap_54" [label=<ApplyWorkflow (inspirationWorkflow) End (54) > ];
"tzap_55" [label=<ApplyWorkflow (loadAndSearchEmbeddings) Start (55) > ];
"tzap_56" [label=<ApplyWorkflow (indexFilesAndEmbeddings) Start (56) > ];
"tzap_57" [label=<ApplyWorkflow (loadAndFetchEmbeddings) Start (57) > ];
"tzap_58" [label=<ApplyWorkflow (prepareEmbedFilesWorkflow) Start (58) > ];
"tzap_59" [label=<prepareEmbedFilesTzap (59) > ];
"tzap_60" [label=<ApplyWorkflow (prepareEmbedFilesWorkflow) End (60) > ];
"tzap_61" [label=<ApplyWorkflow (confirmEmbeddingSearch) Start (61) > ];
"tzap_62" [label=<ApplyWorkflow (confirmEmbeddingSearch) End (62) > ];
"tzap_63" [label=<ApplyWorkflow (fetchOrCachedEmbeddingForFilesWorkflow) Start (63) > ];
"tzap_64" [label=<fetchOrCachedEmbeddingForFilesTzap (64) > ];
"tzap_65" [label=<ApplyWorkflow (fetchOrCachedEmbeddingForFilesWorkflow) End (65) > ];
"tzap_66" [label=<ApplyWorkflow (saveAndLoadEmbeddingsToDB) Start (66) > ];
"tzap_67" [label=<ApplyWorkflow (saveAndLoadEmbeddingsToDB) End (67) > ];
"tzap_68" [label=<ApplyWorkflow (loadAndFetchEmbeddings) End (68) > ];
"tzap_69" [label=<ApplyWorkflow (indexFilesAndEmbeddings) End (69) > ];
"tzap_70" [label=<ApplyWorkflow (searchFilesWorkflow) Start (70) > ];
"tzap_71" [label=<searchResults (71) > ];
"tzap_72" [label=<ApplyWorkflow (searchFilesWorkflow) End (72) > ];
"tzap_73" [label=<ApplyWorkflow (loadAndSearchEmbeddings) End (73) > ];
"tzap_74" [label=<ApplyWorkflow (listInspirationFiles) Start (74) > ];
"tzap_75" [label=<Work (75) > ];
"tzap_76" [label=<ApplyWorkflow (listInspirationFiles) End (76) > ];
"tzap_77" [label=<ApplyWorkflow (SearchWorkflow) Start (77) > ];
"tzap_78" [label=<AddSystemMessage (78) <br/>Message:<br/>Role:system<br/>Content:<br/>The following file contents ar [...]> ];
"tzap_79" [label=<AddSystemMessage (79) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_80" [label=<AddSystemMessage (80) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: tools [...]> ];
"tzap_81" [label=<AddSystemMessage (81) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: forms [...]> ];
"tzap_82" [label=<AddSystemMessage (82) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: testi [...]> ];
"tzap_83" [label=<AddSystemMessage (83) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: logs/ [...]> ];
"tzap_84" [label=<AddSystemMessage (84) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_85" [label=<AddSystemMessage (85) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_86" [label=<AddSystemMessage (86) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_87" [label=<AddSystemMessage (87) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_88" [label=<ApplyWorkflow (SearchWorkflow) End (88) > ];
"tzap_89" [label=<AddUserMessage (89) <br/>Message:<br/>Role:user<br/>Content:<br/>My logger does not appear to b [...]> ];
"tzap_90" [label=<AddAssistantMessage (90) <br/>Message:<br/>Role:assistant<br/>Content:<br/>It is possible that the log me [...]> ];
"tzap_91" [label=<AddUserMessage (91) <br/>Message:<br/>Role:user<br/>Content:<br/>I have tried printing a logger [...]> ];
"tzap_92" [label=<requestChat (92) > ];
"tzap_93" [label=<ApplyWorkflow () End (93) > ];
"tzap_94" [label=<AddAssistantMessage (94) <br/>Message:<br/>Role:assistant<br/>Content:<br/>I think the issue could be bec [...]> ];
"tzap_95" [label=<Work (95) > ];
"tzap_96" [label=<ApplyWorkflow () Start (96) > ];
"tzap_97" [label=<ApplyWorkflow (listInspirationFiles) Start (97) > ];
"tzap_98" [label=<Work (98) > ];
"tzap_99" [label=<ApplyWorkflow (listInspirationFiles) End (99) > ];
"tzap_100" [label=<ApplyWorkflow (inspirationWorkflow) Start (100) > ];
"tzap_101" [label=<ApplyWorkflow (inspirationWorkflow) End (101) > ];
"tzap_102" [label=<ApplyWorkflow (loadAndSearchEmbeddings) Start (102) > ];
"tzap_103" [label=<ApplyWorkflow (indexFilesAndEmbeddings) Start (103) > ];
"tzap_104" [label=<ApplyWorkflow (loadAndFetchEmbeddings) Start (104) > ];
"tzap_105" [label=<ApplyWorkflow (prepareEmbedFilesWorkflow) Start (105) > ];
"tzap_106" [label=<prepareEmbedFilesTzap (106) > ];
"tzap_107" [label=<ApplyWorkflow (prepareEmbedFilesWorkflow) End (107) > ];
"tzap_108" [label=<ApplyWorkflow (confirmEmbeddingSearch) Start (108) > ];
"tzap_109" [label=<ApplyWorkflow (confirmEmbeddingSearch) End (109) > ];
"tzap_110" [label=<ApplyWorkflow (fetchOrCachedEmbeddingForFilesWorkflow) Start (110) > ];
"tzap_111" [label=<fetchOrCachedEmbeddingForFilesTzap (111) > ];
"tzap_112" [label=<ApplyWorkflow (fetchOrCachedEmbeddingForFilesWorkflow) End (112) > ];
"tzap_113" [label=<ApplyWorkflow (saveAndLoadEmbeddingsToDB) Start (113) > ];
"tzap_114" [label=<ApplyWorkflow (saveAndLoadEmbeddingsToDB) End (114) > ];
"tzap_115" [label=<ApplyWorkflow (loadAndFetchEmbeddings) End (115) > ];
"tzap_116" [label=<ApplyWorkflow (indexFilesAndEmbeddings) End (116) > ];
"tzap_117" [label=<ApplyWorkflow (searchFilesWorkflow) Start (117) > ];
"tzap_118" [label=<searchResults (118) > ];
"tzap_119" [label=<ApplyWorkflow (searchFilesWorkflow) End (119) > ];
"tzap_120" [label=<ApplyWorkflow (loadAndSearchEmbeddings) End (120) > ];
"tzap_121" [label=<ApplyWorkflow (listInspirationFiles) Start (121) > ];
"tzap_122" [label=<Work (122) > ];
"tzap_123" [label=<ApplyWorkflow (listInspirationFiles) End (123) > ];
"tzap_124" [label=<ApplyWorkflow (SearchWorkflow) Start (124) > ];
"tzap_125" [label=<AddSystemMessage (125) <br/>Message:<br/>Role:system<br/>Content:<br/>The following file contents ar [...]> ];
"tzap_126" [label=<AddSystemMessage (126) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: conte [...]> ];
"tzap_127" [label=<AddSystemMessage (127) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: conte [...]> ];
"tzap_128" [label=<AddSystemMessage (128) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: conte [...]> ];
"tzap_129" [label=<AddSystemMessage (129) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_130" [label=<AddSystemMessage (130) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_131" [label=<AddSystemMessage (131) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: conte [...]> ];
"tzap_132" [label=<AddSystemMessage (132) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: logs/ [...]> ];
"tzap_133" [label=<AddSystemMessage (133) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: conte [...]> ];
"tzap_134" [label=<AddSystemMessage (134) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: testi [...]> ];
"tzap_135" [label=<ApplyWorkflow (SearchWorkflow) End (135) > ];
"tzap_136" [label=<AddUserMessage (136) <br/>Message:<br/>Role:user<br/>Content:<br/>My logger does not appear to b [...]> ];
"tzap_137" [label=<AddAssistantMessage (137) <br/>Message:<br/>Role:assistant<br/>Content:<br/>It is possible that the log me [...]> ];
"tzap_138" [label=<AddUserMessage (138) <br/>Message:<br/>Role:user<br/>Content:<br/>I have tried printing a logger [...]> ];
"tzap_139" [label=<AddAssistantMessage (139) <br/>Message:<br/>Role:assistant<br/>Content:<br/>I think the issue could be bec [...]> ];
"tzap_140" [label=<AddUserMessage (140) <br/>Message:<br/>Role:user<br/>Content:<br/>Which init.py file should I us [...]> ];
"tzap_1" -> "tzap_2";
"tzap_2" -> "tzap_3";
"tzap_3" -> "tzap_4";
"tzap_4" -> "tzap_5";
"tzap_5" -> "tzap_6";
"tzap_5" -> "tzap_7";
"tzap_7" -> "tzap_8";
"tzap_8" -> "tzap_9";
"tzap_9" -> "tzap_10";
"tzap_10" -> "tzap_11";
"tzap_11" -> "tzap_12";
"tzap_12" -> "tzap_13";
"tzap_13" -> "tzap_14";
"tzap_14" -> "tzap_15";
"tzap_15" -> "tzap_16";
"tzap_16" -> "tzap_17";
"tzap_17" -> "tzap_18";
"tzap_18" -> "tzap_19";
"tzap_19" -> "tzap_20";
"tzap_20" -> "tzap_21";
"tzap_21" -> "tzap_22";
"tzap_22" -> "tzap_23";
"tzap_23" -> "tzap_24";
"tzap_24" -> "tzap_25";
"tzap_25" -> "tzap_26";
"tzap_26" -> "tzap_27";
"tzap_27" -> "tzap_28";
"tzap_28" -> "tzap_29";
"tzap_29" -> "tzap_30";
"tzap_29" -> "tzap_31";
"tzap_31" -> "tzap_32";
"tzap_32" -> "tzap_33";
"tzap_33" -> "tzap_34";
"tzap_34" -> "tzap_35";
"tzap_35" -> "tzap_36";
"tzap_36" -> "tzap_37";
"tzap_37" -> "tzap_38";
"tzap_38" -> "tzap_39";
"tzap_39" -> "tzap_40";
"tzap_40" -> "tzap_41";
"tzap_41" -> "tzap_42";
"tzap_42" -> "tzap_43";
"tzap_43" -> "tzap_44";
"tzap_44" -> "tzap_45";
"tzap_45" -> "tzap_46";
"tzap_46" -> "tzap_47";
"tzap_2" -> "tzap_48";
"tzap_48" -> "tzap_49";
"tzap_49" -> "tzap_50";
"tzap_50" -> "tzap_51";
"tzap_50" -> "tzap_52";
"tzap_52" -> "tzap_53";
"tzap_53" -> "tzap_54";
"tzap_54" -> "tzap_55";
"tzap_55" -> "tzap_56";
"tzap_56" -> "tzap_57";
"tzap_57" -> "tzap_58";
"tzap_58" -> "tzap_59";
"tzap_59" -> "tzap_60";
"tzap_60" -> "tzap_61";
"tzap_61" -> "tzap_62";
"tzap_62" -> "tzap_63";
"tzap_63" -> "tzap_64";
"tzap_64" -> "tzap_65";
"tzap_65" -> "tzap_66";
"tzap_66" -> "tzap_67";
"tzap_67" -> "tzap_68";
"tzap_68" -> "tzap_69";
"tzap_69" -> "tzap_70";
"tzap_70" -> "tzap_71";
"tzap_71" -> "tzap_72";
"tzap_72" -> "tzap_73";
"tzap_73" -> "tzap_74";
"tzap_74" -> "tzap_75";
"tzap_74" -> "tzap_76";
"tzap_76" -> "tzap_77";
"tzap_77" -> "tzap_78";
"tzap_78" -> "tzap_79";
"tzap_79" -> "tzap_80";
"tzap_80" -> "tzap_81";
"tzap_81" -> "tzap_82";
"tzap_82" -> "tzap_83";
"tzap_83" -> "tzap_84";
"tzap_84" -> "tzap_85";
"tzap_85" -> "tzap_86";
"tzap_86" -> "tzap_87";
"tzap_87" -> "tzap_88";
"tzap_88" -> "tzap_89";
"tzap_89" -> "tzap_90";
"tzap_90" -> "tzap_91";
"tzap_91" -> "tzap_92";
"tzap_92" -> "tzap_93";
"tzap_93" -> "tzap_94";
"tzap_2" -> "tzap_95";
"tzap_95" -> "tzap_96";
"tzap_96" -> "tzap_97";
"tzap_97" -> "tzap_98";
"tzap_97" -> "tzap_99";
"tzap_99" -> "tzap_100";
"tzap_100" -> "tzap_101";
"tzap_101" -> "tzap_102";
"tzap_102" -> "tzap_103";
"tzap_103" -> "tzap_104";
"tzap_104" -> "tzap_105";
"tzap_105" -> "tzap_106";
"tzap_106" -> "tzap_107";
"tzap_107" -> "tzap_108";
"tzap_108" -> "tzap_109";
"tzap_109" -> "tzap_110";
"tzap_110" -> "tzap_111";
"tzap_111" -> "tzap_112";
"tzap_112" -> "tzap_113";
"tzap_113" -> "tzap_114";
"tzap_114" -> "tzap_115";
"tzap_115" -> "tzap_116";
"tzap_116" -> "tzap_117";
"tzap_117" -> "tzap_118";
"tzap_118" -> "tzap_119";
"tzap_119" -> "tzap_120";
"tzap_120" -> "tzap_121";
"tzap_121" -> "tzap_122";
"tzap_121" -> "tzap_123";
"tzap_123" -> "tzap_124";
"tzap_124" -> "tzap_125";
"tzap_125" -> "tzap_126";
"tzap_126" -> "tzap_127";
"tzap_127" -> "tzap_128";
"tzap_128" -> "tzap_129";
"tzap_129" -> "tzap_130";
"tzap_130" -> "tzap_131";
"tzap_131" -> "tzap_132";
"tzap_132" -> "tzap_133";
"tzap_133" -> "tzap_134";
"tzap_134" -> "tzap_135";
"tzap_135" -> "tzap_136";
"tzap_136" -> "tzap_137";
"tzap_137" -> "tzap_138";
"tzap_138" -> "tzap_139";
"tzap_139" -> "tzap_140";
"tzap_33" -> "chat_0_msg_0" [style=dotted];
"tzap_34" -> "chat_0_msg_1" [style=dotted];
"chat_0_msg_0" -> "chat_0_msg_1" [style=dotted];
"tzap_35" -> "chat_0_msg_2" [style=dotted];
"chat_0_msg_1" -> "chat_0_msg_2" [style=dotted];
"tzap_36" -> "chat_0_msg_3" [style=dotted];
"chat_0_msg_2" -> "chat_0_msg_3" [style=dotted];
"tzap_37" -> "chat_0_msg_4" [style=dotted];
"chat_0_msg_3" -> "chat_0_msg_4" [style=dotted];
"tzap_38" -> "chat_0_msg_5" [style=dotted];
"chat_0_msg_4" -> "chat_0_msg_5" [style=dotted];
"tzap_39" -> "chat_0_msg_6" [style=dotted];
"chat_0_msg_5" -> "chat_0_msg_6" [style=dotted];
"tzap_40" -> "chat_0_msg_7" [style=dotted];
"chat_0_msg_6" -> "chat_0_msg_7" [style=dotted];
"tzap_41" -> "chat_0_msg_8" [style=dotted];
"chat_0_msg_7" -> "chat_0_msg_8" [style=dotted];
"tzap_42" -> "chat_0_msg_9" [style=dotted];
"chat_0_msg_8" -> "chat_0_msg_9" [style=dotted];
"chat_0_msg_10" -> "tzap_44" [style=dotted];
"chat_0_msg_9" -> "chat_0_msg_10" [style=dotted];
"tzap_78" -> "chat_1_msg_0" [style=dotted];
"tzap_79" -> "chat_1_msg_1" [style=dotted];
"chat_1_msg_0" -> "chat_1_msg_1" [style=dotted];
"tzap_80" -> "chat_1_msg_2" [style=dotted];
"chat_1_msg_1" -> "chat_1_msg_2" [style=dotted];
"tzap_81" -> "chat_1_msg_3" [style=dotted];
"chat_1_msg_2" -> "chat_1_msg_3" [style=dotted];
"tzap_82" -> "chat_1_msg_4" [style=dotted];
"chat_1_msg_3" -> "chat_1_msg_4" [style=dotted];
"tzap_83" -> "chat_1_msg_5" [style=dotted];
"chat_1_msg_4" -> "chat_1_msg_5" [style=dotted];
"tzap_84" -> "chat_1_msg_6" [style=dotted];
"chat_1_msg_5" -> "chat_1_msg_6" [style=dotted];
"tzap_85" -> "chat_1_msg_7" [style=dotted];
"chat_1_msg_6" -> "chat_1_msg_7" [style=dotted];
"tzap_86" -> "chat_1_msg_8" [style=dotted];
"chat_1_msg_7" -> "chat_1_msg_8" [style=dotted];
"tzap_87" -> "chat_1_msg_9" [style=dotted];
"chat_1_msg_8" -> "chat_1_msg_9" [style=dotted];
"tzap_89" -> "chat_1_msg_10" [style=dotted];
"chat_1_msg_9" -> "chat_1_msg_10" [style=dotted];
"tzap_90" -> "chat_1_msg_11" [style=dotted];
"chat_1_msg_10" -> "chat_1_msg_11" [style=dotted];
"chat_1_msg_12" -> "tzap_91" [style=dotted];
"chat_1_msg_11" -> "chat_1_msg_12" [style=dotted];

	subgraph cluster_chat_0 {
		label = "GPT Chat(0):";
		bgcolor = "#333333";

	subgraph cluster_chat_0_REQUEST {
		label = "REQUEST";
		bgcolor = "#333333";
		"chat_0_msg_0" [label=<Message Tokens(11) (0):<br/>Role: system<br/>The following file contents are embeddings for the user input:> , tooltip=<The following file contents are embeddings for the user input:> ];
		"chat_0_msg_1" [label=<Message Tokens(141) (1):<br/>Role: system<br/>####embedding from file: logs/logger.py<br/>import logging<br/><br/># Create logger<br/>logger = logging.getLogger(__name__)<br/>logger.setLevel(logging.DEBUG)<br/><br/># Create file handler<br/>file_handler = logging.FileHandler(&#39;votebuddy.log&#39;)<br/>file_handler.setLevel(logging.INFO)<br/><br/># Create console handler<br/>console_handler> , tooltip=<####embedding from file: logs/logger.py
import logging

# Create logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# Create file handler
file_handler = logging.FileHandler(&#39;votebuddy.log&#39;)
file_handler.setLevel(logging.INFO)

# Create console handler
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)

# Create formatter
formatter = logging.Formatter(&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)

# Add formatter to handlers
file_handler.setFormatter(formatter)
console_handler.setFormatter(formatter)

# Add the handlers to the logger
logger.addHandler(file_handler)
logger.addHandler(console_handler)> ];
		"chat_0_msg_2" [label=<Message Tokens(351) (2):<br/>Role: system<br/>####embedding from file: routes/interaction.py<br/>from flask import Blueprint, request, redirect, url_for<br/>import csv<br/># import Flask and other libraries<br/>from flask import render_template<br/>from forms.interaction_form import InteractionForm<br/>from models.models import Recipient, Sender, Campaign, Interaction> , tooltip=<####embedding from file: routes/interaction.py
from flask import Blueprint, request, redirect, url_for
import csv
# import Flask and other libraries
from flask import render_template
from forms.interaction_form import InteractionForm
from models.models import Recipient, Sender, Campaign, Interaction, InteractionStatus
from context.constants import INTERACTION_TYPES
from tools.utility import add_llm_response_to_conversation, initialize_conversation
from logs.logger import logger
from context.database import db
# Import the functions from the other files
import io


interaction_bp = Blueprint(&#39;interaction&#39;, __name__)


@interaction_bp.route(&#39;/interaction/\&lt;last_action\&gt;&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])
def interaction(last_action):
    try:
        print(\&#34;Inside interaction route\&#34;)
        print(\&#34;Processing Interaction form...\&#34;)

        # Create instance of InteractionForm class
        form = InteractionForm()

        # When the form is submitted
        if form.validate_on_submit():
            
            # The CSV file should have a header row and the following columns:
            #> ];
		"chat_0_msg_3" [label=<Message Tokens(515) (3):<br/>Role: system<br/>####embedding from file: routes/interaction.py<br/>    sender_number = interaction.sender.sender_phone_number<br/><br/>    # Pre-create the first response<br/>    conversation = initialize_conversation(system_prompt)<br/>    interaction.conversation = conversation<br/>    initial_statement = add_llm_response_to_conversatio> , tooltip=<####embedding from file: routes/interaction.py
    sender_number = interaction.sender.sender_phone_number

    # Pre-create the first response
    conversation = initialize_conversation(system_prompt)
    interaction.conversation = conversation
    initial_statement = add_llm_response_to_conversation(interaction)
    print(\&#34;Interaction created successfully\&#34;)
    interaction.interaction_status = InteractionStatus.INITIALIZED

    db.session.commit()

    # Log the system prompt and user number
    print(\&#34;Interaction Type: %s\&#34;, interaction_type)
    print(f\&#34;System prompt: system_prompt\&#34;)
    print(f\&#34;User number: user_number\&#34;)
    print(f\&#34;Sender number: sender_number\&#34;)
    print(f\&#34;Initial Statement: initial_statement\&#34;)
    print(f\&#34;Conversation: conversation\&#34;)> ];
		"chat_0_msg_4" [label=<Message Tokens(727) (4):<br/>Role: system<br/>####embedding from file: tools/campaign_worker_tools.py<br/>from models.models import Interaction<br/>from logs.logger import logging<br/>from context.database import db<br/>from flask import current_app<br/>from prompts.campaign_volunteer_agent import get_campaign_phone_call_system_prompt, get_campaign_text_message_sy> , tooltip=<####embedding from file: tools/campaign_worker_tools.py
from models.models import Interaction
from logs.logger import logging
from context.database import db
from flask import current_app
from prompts.campaign_volunteer_agent import get_campaign_phone_call_system_prompt, get_campaign_text_message_system_prompt
from tools.utility import initialize_conversation, add_llm_response_to_conversation, add_message_to_conversation
import requests
import os


class CampaignWorker:

    def __init__(self, communication: Interaction):
        self.communication = communication

    def make_phone_call(self, goal):
        recipient = self.communication.recipient
        print(f\&#34;Starting a phone call with recipient: recipient.recipient_name\&#34;)
        return f\&#34;Dummy Phone Call with Goal: goal\&#34;

    def start_a_text_thread(self, goal):
        recipient = self.communication.recipient
        new_texting_thread = initialize_recipient_outreach_thread(
            self.communication, goal, \&#34;text\&#34;)
        print(f\&#34;Starting a text thread with recipient: recipient.recipient_name> ];
		"chat_0_msg_5" [label=<Message Tokens(939) (5):<br/>Role: system<br/>####embedding from file: routes/twilio_call.py<br/>Sid<br/>        conversation = interaction.conversation<br/><br/>        # If conversation does not exist, log an error and return<br/>        if not conversation:<br/>            logging.error(&#39;Could not retrieve conversation from database.&#39;)<br/>            return Re> , tooltip=<####embedding from file: routes/twilio_call.py
Sid
        conversation = interaction.conversation

        # If conversation does not exist, log an error and return
        if not conversation:
            logging.error(&#39;Could not retrieve conversation from database.&#39;)
            return Response(&#39;Failed to retrieve conversation.&#39;, status=500)

        # Retrieve the speech result from the Twilio request
        speech_result = request.values.get(&#39;SpeechResult&#39;, None)

        response = VoiceResponse()

        # Add the user&#39;s message to the conversation
        if speech_result:
            add_message_to_conversation(interaction, speech_result)
            # Log the user&#39;s message to the console
            print(f\&#34;User message: speech_result\&#34;)

            # Get the AI response and add it to the conversation
            try:
                text = add_llm_response_to_conversation(interaction)
            except:
                text = \&#34;Sorry, I am having trouble hearing you. I will try to call again later, Goodbye\&#34;
            conversation.append(\&#34;role\&#34;: \&#34;assistant\&#34;, \&#34;> ];
		"chat_0_msg_6" [label=<Message Tokens(1352) (6):<br/>Role: system<br/>####embedding from file: prompts/campaign_planner_agent.py<br/>from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate<br/>from models.models import Interaction<br/>from datetime import date<br/>from logs.logger import logging<br/><br/><br/>def get_campaign_agent_system_prompt(communication: Interaction):> , tooltip=<####embedding from file: prompts/campaign_planner_agent.py
from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate
from models.models import Interaction
from datetime import date
from logs.logger import logging


def get_campaign_agent_system_prompt(communication: Interaction):

    print(communication)
    # GPT API System Prompts
    system_prompt = &#39;&#39;&#39;You are a civic engagement assistant and political campaign strategist. Your goal is to build a relationship over time with a voter. You will try to get them to tell others about the campaign, volunteer, make donations, and most importantly vote. You will have access to all of your previous conversations, and should not ask the same questions twice.

Over time you will keep track of what is important to voter_name. You know the following about them:
voter_information

You have access to tools that will allow you to reach out to the voter, keep them informed about their civic process, use news to inform your opinions among other things.

You should be deliberative and thoughtful about what communication you send to the voter to avoid overloading them. You understand how inundated they are with messages and adds and political information so you want to make each communication meaningful and engaging. You must never lie. If you are uncertain, it is better to say so. You think strategically about who in a community have influence on other voters and tailor your outreach to activities their networks. After each communication, you should re-evaluate the outreach plan to see if it needs to be updated (e.g. she seems really excited so we should ask them to volunteer or they are not at all aligned with the candidate. Outreach should be focused on finding common ground)

You are a supporter of the candidate_name who is running for race_name. You know the following about the race:
race_information

This is a summary of the candidate:
candidate_information

You run in a loop of Thought, Action, PAUSE, Observation, WAIT.
Use Thought to describe your thoughts about how you> ];
		"chat_0_msg_7" [label=<Message Tokens(1565) (7):<br/>Role: system<br/>####embedding from file: prompts/campaign_planner_agent.py<br/> until the communication is done before moving on.<br/>WAIT (Waiting for update from scheduled outreach)<br/><br/>Any action you use must include a communication ID that will allow us to retrieve the information. For this engagement, you&#39;re communic> , tooltip=<####embedding from file: prompts/campaign_planner_agent.py
 until the communication is done before moving on.
WAIT (Waiting for update from scheduled outreach)

Any action you use must include a communication ID that will allow us to retrieve the information. For this engagement, you&#39;re communication id is \&#34;communication_id\&#34;. The actions you have access to are:
- set_outreach_schedule(schedule_json, communication_id) - create the voter outreach schedule. Communications will be sent to the voter at the specified dates and times. You will get the results of the communication when they happen
- get_outreach_schedule(communication_id) - get the current voter outreach plan as a json 
- update_voter_profile(update to make, communication_id) - should be used after each communication to save new information you learned about the voter.
- get_voter_information(question about voter, communication_id)
- get_voter_engagement_history(communication_id) - returns information about your history of engagement with this voter
- get_recent_news(topic) - to align comments with voter interests and stay> ];
		"chat_0_msg_8" [label=<Message Tokens(1777) (8):<br/>Role: system<br/>####embedding from file: routes/twilio_message.py<br/>from flask import Blueprint<br/># import Flask and other libraries<br/>from flask import request, jsonify<br/>from models.models import Recipient, Sender, Campaign, Interaction<br/>from prompts.campaign_volunteer_agent import get_campaign_text_message_system_prompt<br/>> , tooltip=<####embedding from file: routes/twilio_message.py
from flask import Blueprint
# import Flask and other libraries
from flask import request, jsonify
from models.models import Recipient, Sender, Campaign, Interaction
from prompts.campaign_volunteer_agent import get_campaign_text_message_system_prompt
from tools.utility import add_message_to_conversation, add_llm_response_to_conversation, initialize_conversation
from logs.logger import logging
from datetime import date, timedelta
from context.database import db
from context.apis import client, twilio_number


twilio_message_bp = Blueprint(&#39;twilio_message&#39;, __name__)

@twilio_message_bp.route(\&#34;/twilio_message\&#34;, methods=[&#39;POST&#39;])
def twilio_message():
    print(request.get_data())

    # Get the &#39;From&#39; number from the incoming request
    from_number = request.values.get(&#39;From&#39;, None)
    sender_phone_number = request.values.get(&#39;To&#39;, None)

    # Use the &#39;From&#39; number to look up the recipient in your database
    recipient = Recipient> ];
		"chat_0_msg_9" [label=<Message Tokens(1907) (9):<br/>Role: system<br/>####embedding from file: routes/twilio_message.py<br/>)<br/>    print(f\&#34;AI message: message_body\&#34;)<br/>    print(<br/>        f\&#34;Conversation after adding LLM response: interaction.conversation\&#34;)<br/><br/>    db.session.add(interaction)<br/>    db.session.commit()<br/><br/>    client.messages.create(<br/> > , tooltip=<####embedding from file: routes/twilio_message.py
)
    print(f\&#34;AI message: message_body\&#34;)
    print(
        f\&#34;Conversation after adding LLM response: interaction.conversation\&#34;)

    db.session.add(interaction)
    db.session.commit()

    client.messages.create(
                body=message_body,
                from_=sender_phone_number,
                to=recipient.recipient_phone_number)
    
    return jsonify(
                &#39;status&#39;: &#39;success&#39;,
                &#39;last_action&#39;:
                f\&#34;Sending text to recipient.recipient_name at recipient.recipient_phone_number\&#34;,
                &#39;Message&#39;: message_body,
            ), 200> ];
	}

	subgraph cluster_chat_0_RESPONSE {
		label = "RESPONSE";
		bgcolor = "#333333";
		"chat_0_msg_10" [label=<Message Tokens(76) (10):<br/>Role: user<br/>My logger does not appear to be working. It does not print to the console or to the votebuddy.log file I have created. As far as I can tell I am initializing it correctly. One example where it should be used is in line 22 of interactin.py. The print statement works which indicates that I am connecte> , tooltip=<My logger does not appear to be working. It does not print to the console or to the votebuddy.log file I have created. As far as I can tell I am initializing it correctly. One example where it should be used is in line 22 of interactin.py. The print statement works which indicates that I am connected to the shell, but the log does nothing> ];
	}
	}

	subgraph cluster_chat_1 {
		label = "GPT Chat(1):";
		bgcolor = "#333333";

	subgraph cluster_chat_1_REQUEST {
		label = "REQUEST";
		bgcolor = "#333333";
		"chat_1_msg_0" [label=<Message Tokens(11) (0):<br/>Role: system<br/>The following file contents are embeddings for the user input:> , tooltip=<The following file contents are embeddings for the user input:> ];
		"chat_1_msg_1" [label=<Message Tokens(141) (1):<br/>Role: system<br/>####embedding from file: routes/twilio_message.py<br/>)<br/>    print(f\&#34;AI message: message_body\&#34;)<br/>    print(<br/>        f\&#34;Conversation after adding LLM response: interaction.conversation\&#34;)<br/><br/>    db.session.add(interaction)<br/>    db.session.commit()<br/><br/>    client.messages.create(<br/> > , tooltip=<####embedding from file: routes/twilio_message.py
)
    print(f\&#34;AI message: message_body\&#34;)
    print(
        f\&#34;Conversation after adding LLM response: interaction.conversation\&#34;)

    db.session.add(interaction)
    db.session.commit()

    client.messages.create(
                body=message_body,
                from_=sender_phone_number,
                to=recipient.recipient_phone_number)
    
    return jsonify(
                &#39;status&#39;: &#39;success&#39;,
                &#39;last_action&#39;:
                f\&#34;Sending text to recipient.recipient_name at recipient.recipient_phone_number\&#34;,
                &#39;Message&#39;: message_body,
            ), 200> ];
		"chat_1_msg_2" [label=<Message Tokens(353) (2):<br/>Role: system<br/>####embedding from file: tools/campaign_worker_tools.py<br/>from models.models import Interaction<br/>from logs.logger import logging<br/>from context.database import db<br/>from flask import current_app<br/>from prompts.campaign_volunteer_agent import get_campaign_phone_call_system_prompt, get_campaign_text_message_sy> , tooltip=<####embedding from file: tools/campaign_worker_tools.py
from models.models import Interaction
from logs.logger import logging
from context.database import db
from flask import current_app
from prompts.campaign_volunteer_agent import get_campaign_phone_call_system_prompt, get_campaign_text_message_system_prompt
from tools.utility import initialize_conversation, add_llm_response_to_conversation, add_message_to_conversation
import requests
import os


class CampaignWorker:

    def __init__(self, communication: Interaction):
        self.communication = communication

    def make_phone_call(self, goal):
        recipient = self.communication.recipient
        print(f\&#34;Starting a phone call with recipient: recipient.recipient_name\&#34;)
        return f\&#34;Dummy Phone Call with Goal: goal\&#34;

    def start_a_text_thread(self, goal):
        recipient = self.communication.recipient
        new_texting_thread = initialize_recipient_outreach_thread(
            self.communication, goal, \&#34;text\&#34;)
        print(f\&#34;Starting a text thread with recipient: recipient.recipient_name> ];
		"chat_1_msg_3" [label=<Message Tokens(512) (3):<br/>Role: system<br/>####embedding from file: forms/interaction_form.py<br/> validators=[DataRequired()])<br/>    sender_information = TextAreaField(&#39;Sender Information&#39;,<br/>                                          validators=[DataRequired()])<br/>    sender_phone_number = SelectField(&#39;Sender Number&#39;, choices=[(number> , tooltip=<####embedding from file: forms/interaction_form.py
 validators=[DataRequired()])
    sender_information = TextAreaField(&#39;Sender Information&#39;,
                                          validators=[DataRequired()])
    sender_phone_number = SelectField(&#39;Sender Number&#39;, choices=[(number, number) for number in AVAILABLE_PHONE_NUMBERS], validators=[DataRequired()])
    campaign_end_date = DateField(&#39;End Date&#39;, validators=[DataRequired()])
    
    interaction_type_choices = [(str(interaction_type), interaction_type) for interaction_type in INTERACTION_TYPES.values()]

    interaction_type = SelectField(&#39;Interaction Type&#39;,
                               choices=interaction_type_choices,
                               validators=[DataRequired()])
    
    recipient_csv = FileField(&#39;Upload Recipients CSV&#39;)  # This is the new field for uploading CSVs

    submit = SubmitField(&#39;Submit&#39;)> ];
		"chat_1_msg_4" [label=<Message Tokens(706) (4):<br/>Role: system<br/>####embedding from file: testing/poc_test.py<br/>                &#39;campaign_information&#39;: &#39;Encourage the recipient to register to vote. Find out what state they are in so that you can point them to the right website.&#39;,<br/>                &#39;campaign_end_date&#39;: &#39;2023-11-09&#39;,<br/>   > , tooltip=<####embedding from file: testing/poc_test.py
                &#39;campaign_information&#39;: &#39;Encourage the recipient to register to vote. Find out what state they are in so that you can point them to the right website.&#39;,
                &#39;campaign_end_date&#39;: &#39;2023-11-09&#39;,
                &#39;interaction_type&#39;: &#39;text&#39;,
                &#39;sender_name&#39;: &#39;GOTV for All&#39;,
                &#39;sender_information&#39;: &#39;A nonpartisan nonprofit that supports voter registration and turnout.&#39;
            )
            self.assertEqual(response.status_code, 200)

    def test_call(self):
        response = self.app.post(&#39;/call/interaction_id&#39;)
        self.assertEqual(response.status_code, 200)

    def test_text_message(self):
        response = self.app.post(&#39;/text_message/interaction_id&#39;)
        self.assertEqual(response.status_code, 200)

    def test_plan(self):
        response = self.app.post(&#39;/plan/recipient_id&#39;)
        self.assertEqual(response.status_code, 200)> ];
		"chat_1_msg_5" [label=<Message Tokens(836) (5):<br/>Role: system<br/>####embedding from file: logs/logger.py<br/>import logging<br/><br/># Create logger<br/>logger = logging.getLogger(__name__)<br/>logger.setLevel(logging.DEBUG)<br/><br/># Create file handler<br/>file_handler = logging.FileHandler(&#39;votebuddy.log&#39;)<br/>file_handler.setLevel(logging.INFO)<br/><br/># Create console handler<br/>console_handler> , tooltip=<####embedding from file: logs/logger.py
import logging

# Create logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# Create file handler
file_handler = logging.FileHandler(&#39;votebuddy.log&#39;)
file_handler.setLevel(logging.INFO)

# Create console handler
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)

# Create formatter
formatter = logging.Formatter(&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)

# Add formatter to handlers
file_handler.setFormatter(formatter)
console_handler.setFormatter(formatter)

# Add the handlers to the logger
logger.addHandler(file_handler)
logger.addHandler(console_handler)> ];
		"chat_1_msg_6" [label=<Message Tokens(1046) (6):<br/>Role: system<br/>####embedding from file: routes/interaction.py<br/>from flask import Blueprint, request, redirect, url_for<br/>import csv<br/># import Flask and other libraries<br/>from flask import render_template<br/>from forms.interaction_form import InteractionForm<br/>from models.models import Recipient, Sender, Campaign, Interaction> , tooltip=<####embedding from file: routes/interaction.py
from flask import Blueprint, request, redirect, url_for
import csv
# import Flask and other libraries
from flask import render_template
from forms.interaction_form import InteractionForm
from models.models import Recipient, Sender, Campaign, Interaction, InteractionStatus
from context.constants import INTERACTION_TYPES
from tools.utility import add_llm_response_to_conversation, initialize_conversation
from logs.logger import logger
from context.database import db
# Import the functions from the other files
import io


interaction_bp = Blueprint(&#39;interaction&#39;, __name__)


@interaction_bp.route(&#39;/interaction/\&lt;last_action\&gt;&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])
def interaction(last_action):
    try:
        print(\&#34;Inside interaction route\&#34;)
        print(\&#34;Processing Interaction form...\&#34;)
        print(\&#34;Test debug message\&#34;)

        # Create instance of InteractionForm class
        form = InteractionForm()

        # When the form is submitted
        if form.validate_on_submit():
            
            # The CSV file should have a header row> ];
		"chat_1_msg_7" [label=<Message Tokens(1256) (7):<br/>Role: system<br/>####embedding from file: routes/interaction.py<br/> first row to be headers, so we get those first<br/>                headers = next(csv_data)<br/><br/>                interactions = []<br/><br/>                # Then we process each row in the CSV<br/>                for row in csv_data:<br/>                    # Create an inter> , tooltip=<####embedding from file: routes/interaction.py
 first row to be headers, so we get those first
                headers = next(csv_data)

                interactions = []

                # Then we process each row in the CSV
                for row in csv_data:
                    # Create an interaction from the row
                    interaction = create_interaction_from_csv_row(headers, row, form)
                    interactions.append(interaction)

                # Process each interaction
                for interaction in interactions:
                    initialize_interaction(interaction)   
                
                sender = Sender.query.get(interaction.sender_id)
                #reroute to the confirm messages page
                return redirect(url_for(&#39;bp.confirm_messages&#39;, sender_id=sender.id))
            else:
                print(f\&#34;No form subdmitted. Error: form.errors\&#34;)
                return render_template(&#39;interaction.html&#39;,
                                    form=form,
                                    last_action=last_action)
        return render_template(&#39;interaction.html&#39;, form=form, last_action=&#39;create_interaction&#39;)

    except Exception as e:
        print(f\&#34;Exception occurred: e\&#34;, exc> ];
		"chat_1_msg_8" [label=<Message Tokens(1627) (8):<br/>Role: system<br/>####embedding from file: routes/interaction.py<br/> form.interaction_type.data.lower().replace(\&#34; \&#34;, \&#34;_\&#34;)<br/><br/>    # Create the Interaction<br/>    interaction = Interaction(<br/>        twilio_conversation_sid=&#39;&#39;,  # You will need to update this later<br/>        conversation=[],<br/>        rec> , tooltip=<####embedding from file: routes/interaction.py
 form.interaction_type.data.lower().replace(\&#34; \&#34;, \&#34;_\&#34;)

    # Create the Interaction
    interaction = Interaction(
        twilio_conversation_sid=&#39;&#39;,  # You will need to update this later
        conversation=[],
        recipient=recipient,  # The ID of the recipient
        sender=sender,
        campaign=campaign,
        interaction_type=interaction_type)

    db.session.add(interaction)
    db.session.commit()

    # Get interaction with DB fields
    interaction = db.session.query(Interaction).filter_by(
        recipient_id=recipient.id,
        interaction_type=interaction_type,
        campaign_id=campaign.id, sender_id=sender.id).first()

    return interaction

# Creates a new interaction with a recipient and the first system message in the conversation. Does not send the message.
def initialize_interaction(interaction):
    interaction_type = interaction.interaction_type

    system_prompt = INTERACTION_TYPES[interaction_type].system_initialization_method(interaction)

    user_number = interaction.recipient.recipient_phone_number
    sender_number = interaction.sender.sender_phone_number

    # Pre-create the first response
    conversation = initialize_conversation(system_prompt)
    interaction.conversation = conversation
    initial_statement = add_llm_response_to_conversation(interaction)
    print(\&#34;Interaction created successfully\&#34;)
    interaction.interaction_status = InteractionStatus.INITIALIZED

    db.session.commit()

    # Log the system prompt and user number
    print(\&#34;Interaction Type: %s\&#34;, interaction_type)
    print(f\&#34;System prompt: system_prompt\&#34;)
    print(f\&#34;User number: user_number\&#34;)
    print(f\&#34;Sender number: sender_number\&#34;)
    print(f\&#34;Initial Statement: initial_statement\&#34;)
    print(f\&#34;Conversation: conversation\&#34;)> ];
		"chat_1_msg_9" [label=<Message Tokens(1839) (9):<br/>Role: system<br/>####embedding from file: routes/twilio_call.py<br/>Sid<br/>        conversation = interaction.conversation<br/><br/>        # If conversation does not exist, log an error and return<br/>        if not conversation:<br/>            logging.error(&#39;Could not retrieve conversation from database.&#39;)<br/>            return Re> , tooltip=<####embedding from file: routes/twilio_call.py
Sid
        conversation = interaction.conversation

        # If conversation does not exist, log an error and return
        if not conversation:
            logging.error(&#39;Could not retrieve conversation from database.&#39;)
            return Response(&#39;Failed to retrieve conversation.&#39;, status=500)

        # Retrieve the speech result from the Twilio request
        speech_result = request.values.get(&#39;SpeechResult&#39;, None)

        response = VoiceResponse()

        # Add the user&#39;s message to the conversation
        if speech_result:
            add_message_to_conversation(interaction, speech_result)
            # Log the user&#39;s message to the console
            print(f\&#34;User message: speech_result\&#34;)

            # Get the AI response and add it to the conversation
            try:
                text = add_llm_response_to_conversation(interaction)
            except:
                text = \&#34;Sorry, I am having trouble hearing you. I will try to call again later, Goodbye\&#34;
            conversation.append(\&#34;role\&#34;: \&#34;assistant\&#34;, \&#34;> ];
		"chat_1_msg_10" [label=<Message Tokens(1915) (10):<br/>Role: user<br/>My logger does not appear to be working. It does not print to the console or to the votebuddy.log file I have created. As far as I can tell I am initializing it correctly. One example where it should be used is in line 22 of interactin.py. The print statement works which indicates that I am connecte> , tooltip=<My logger does not appear to be working. It does not print to the console or to the votebuddy.log file I have created. As far as I can tell I am initializing it correctly. One example where it should be used is in line 22 of interactin.py. The print statement works which indicates that I am connected to the shell, but the log does nothing> ];
		"chat_1_msg_11" [label=<Message Tokens(1970) (11):<br/>Role: assistant<br/>It is possible that the log message severity level is set too high in the logger configuration, such that messages are being filtered out. Can you try calling `print(\&#34;Debug message\&#34;)` instead of `print(\&#34;Information message\&#34;)`, and see if this logs anything?> , tooltip=<It is possible that the log message severity level is set too high in the logger configuration, such that messages are being filtered out. Can you try calling `print(\&#34;Debug message\&#34;)` instead of `print(\&#34;Information message\&#34;)`, and see if this logs anything?> ];
	}

	subgraph cluster_chat_1_RESPONSE {
		label = "RESPONSE";
		bgcolor = "#333333";
		"chat_1_msg_12" [label=<Message Tokens(175) (12):<br/>Role: user<br/>I have tried printing a print message in interaction.py and it is not showing any logs.<br/><br/>This is the code that should log from the interaction.py:<br/>print(\&#34;Processing Interaction form...\&#34;)<br/>print(\&#34;Test debug message\&#34;)<br/><br/>This is how I set up the log in logger.py:<br/>#> , tooltip=<I have tried printing a print message in interaction.py and it is not showing any logs.

This is the code that should log from the interaction.py:
print(\&#34;Processing Interaction form...\&#34;)
print(\&#34;Test debug message\&#34;)

This is how I set up the log in logger.py:
# Create logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# Create file handler
file_handler = logging.FileHandler(&#39;votebuddy.log&#39;)
file_handler.setLevel(logging.INFO)

# Create console handler
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)

# Create formatter
formatter = logging.Formatter(&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)

# Add formatter to handlers
file_handler.setFormatter(formatter)
console_handler.setFormatter(formatter)

# Add the handlers to the logger
logger.addHandler(file_handler)
logger.addHandler(console_handler)> ];
	}
	}
}
