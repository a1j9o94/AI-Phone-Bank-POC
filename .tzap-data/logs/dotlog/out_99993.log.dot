digraph G {

	graph [bgcolor="#222222", fontcolor="white", fontname="Arial", fontsize=10];
    node [shape=box, style=filled, fillcolor="#3a3a3a", fontcolor="white", fontname="Arial", fontsize=10, color="#888888"];
    edge [color="#ffffff", fontcolor="white", fontname="Arial", fontsize=10];
"tzap_1" [label=<Connection (1) > ];
"tzap_2" [label=<MutateContext (2) > ];
"tzap_3" [label=<Work (3) > ];
"tzap_4" [label=<ApplyWorkflow () Start (4) > ];
"tzap_5" [label=<ApplyWorkflow (listInspirationFiles) Start (5) > ];
"tzap_6" [label=<Work (6) > ];
"tzap_7" [label=<ApplyWorkflow (listInspirationFiles) End (7) > ];
"tzap_8" [label=<ApplyWorkflow (inspirationWorkflow) Start (8) > ];
"tzap_9" [label=<ApplyWorkflow (inspirationWorkflow) End (9) > ];
"tzap_10" [label=<ApplyWorkflow (loadAndSearchEmbeddings) Start (10) > ];
"tzap_11" [label=<ApplyWorkflow (indexFilesAndEmbeddings) Start (11) > ];
"tzap_12" [label=<ApplyWorkflow (loadAndFetchEmbeddings) Start (12) > ];
"tzap_13" [label=<ApplyWorkflow (prepareEmbedFilesWorkflow) Start (13) > ];
"tzap_14" [label=<prepareEmbedFilesTzap (14) > ];
"tzap_15" [label=<ApplyWorkflow (prepareEmbedFilesWorkflow) End (15) > ];
"tzap_16" [label=<ApplyWorkflow (confirmEmbeddingSearch) Start (16) > ];
"tzap_17" [label=<ApplyWorkflow (confirmEmbeddingSearch) End (17) > ];
"tzap_18" [label=<ApplyWorkflow (fetchOrCachedEmbeddingForFilesWorkflow) Start (18) > ];
"tzap_19" [label=<fetchOrCachedEmbeddingForFilesTzap (19) > ];
"tzap_20" [label=<ApplyWorkflow (fetchOrCachedEmbeddingForFilesWorkflow) End (20) > ];
"tzap_21" [label=<ApplyWorkflow (saveAndLoadEmbeddingsToDB) Start (21) > ];
"tzap_22" [label=<ApplyWorkflow (saveAndLoadEmbeddingsToDB) End (22) > ];
"tzap_23" [label=<ApplyWorkflow (loadAndFetchEmbeddings) End (23) > ];
"tzap_24" [label=<ApplyWorkflow (indexFilesAndEmbeddings) End (24) > ];
"tzap_25" [label=<ApplyWorkflow (searchFilesWorkflow) Start (25) > ];
"tzap_26" [label=<searchResults (26) > ];
"tzap_27" [label=<ApplyWorkflow (searchFilesWorkflow) End (27) > ];
"tzap_28" [label=<ApplyWorkflow (loadAndSearchEmbeddings) End (28) > ];
"tzap_29" [label=<ApplyWorkflow (listInspirationFiles) Start (29) > ];
"tzap_30" [label=<Work (30) > ];
"tzap_31" [label=<ApplyWorkflow (listInspirationFiles) End (31) > ];
"tzap_32" [label=<ApplyWorkflow (SearchWorkflow) Start (32) > ];
"tzap_33" [label=<AddSystemMessage (33) <br/>Message:<br/>Role:system<br/>Content:<br/>The following file contents ar [...]> ];
"tzap_34" [label=<AddSystemMessage (34) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_35" [label=<AddSystemMessage (35) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_36" [label=<AddSystemMessage (36) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_37" [label=<AddSystemMessage (37) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: forms [...]> ];
"tzap_38" [label=<AddSystemMessage (38) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_39" [label=<AddSystemMessage (39) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: promp [...]> ];
"tzap_40" [label=<AddSystemMessage (40) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: promp [...]> ];
"tzap_41" [label=<AddSystemMessage (41) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_42" [label=<AddSystemMessage (42) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_43" [label=<ApplyWorkflow (SearchWorkflow) End (43) > ];
"tzap_44" [label=<AddUserMessage (44) <br/>Message:<br/>Role:user<br/>Content:<br/>When a user submits, the inter [...]> ];
"tzap_45" [label=<requestChat (45) > ];
"tzap_46" [label=<ApplyWorkflow () End (46) > ];
"tzap_47" [label=<AddAssistantMessage (47) <br/>Message:<br/>Role:assistant<br/>Content:<br/>Sure thing! One way to achieve [...]> ];
"tzap_48" [label=<Work (48) > ];
"tzap_49" [label=<ApplyWorkflow () Start (49) > ];
"tzap_50" [label=<ApplyWorkflow (listInspirationFiles) Start (50) > ];
"tzap_51" [label=<Work (51) > ];
"tzap_52" [label=<ApplyWorkflow (listInspirationFiles) End (52) > ];
"tzap_53" [label=<ApplyWorkflow (inspirationWorkflow) Start (53) > ];
"tzap_54" [label=<ApplyWorkflow (inspirationWorkflow) End (54) > ];
"tzap_55" [label=<ApplyWorkflow (loadAndSearchEmbeddings) Start (55) > ];
"tzap_56" [label=<ApplyWorkflow (indexFilesAndEmbeddings) Start (56) > ];
"tzap_57" [label=<ApplyWorkflow (loadAndFetchEmbeddings) Start (57) > ];
"tzap_58" [label=<ApplyWorkflow (prepareEmbedFilesWorkflow) Start (58) > ];
"tzap_59" [label=<prepareEmbedFilesTzap (59) > ];
"tzap_60" [label=<ApplyWorkflow (prepareEmbedFilesWorkflow) End (60) > ];
"tzap_61" [label=<ApplyWorkflow (confirmEmbeddingSearch) Start (61) > ];
"tzap_62" [label=<ApplyWorkflow (confirmEmbeddingSearch) End (62) > ];
"tzap_63" [label=<ApplyWorkflow (fetchOrCachedEmbeddingForFilesWorkflow) Start (63) > ];
"tzap_64" [label=<fetchOrCachedEmbeddingForFilesTzap (64) > ];
"tzap_65" [label=<ApplyWorkflow (fetchOrCachedEmbeddingForFilesWorkflow) End (65) > ];
"tzap_66" [label=<ApplyWorkflow (saveAndLoadEmbeddingsToDB) Start (66) > ];
"tzap_67" [label=<ApplyWorkflow (saveAndLoadEmbeddingsToDB) End (67) > ];
"tzap_68" [label=<ApplyWorkflow (loadAndFetchEmbeddings) End (68) > ];
"tzap_69" [label=<ApplyWorkflow (indexFilesAndEmbeddings) End (69) > ];
"tzap_70" [label=<ApplyWorkflow (searchFilesWorkflow) Start (70) > ];
"tzap_71" [label=<searchResults (71) > ];
"tzap_72" [label=<ApplyWorkflow (searchFilesWorkflow) End (72) > ];
"tzap_73" [label=<ApplyWorkflow (loadAndSearchEmbeddings) End (73) > ];
"tzap_74" [label=<ApplyWorkflow (listInspirationFiles) Start (74) > ];
"tzap_75" [label=<Work (75) > ];
"tzap_76" [label=<ApplyWorkflow (listInspirationFiles) End (76) > ];
"tzap_77" [label=<ApplyWorkflow (SearchWorkflow) Start (77) > ];
"tzap_78" [label=<AddSystemMessage (78) <br/>Message:<br/>Role:system<br/>Content:<br/>The following file contents ar [...]> ];
"tzap_79" [label=<AddSystemMessage (79) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: tools [...]> ];
"tzap_80" [label=<AddSystemMessage (80) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: promp [...]> ];
"tzap_81" [label=<AddSystemMessage (81) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_82" [label=<AddSystemMessage (82) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_83" [label=<AddSystemMessage (83) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_84" [label=<AddSystemMessage (84) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_85" [label=<AddSystemMessage (85) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_86" [label=<AddSystemMessage (86) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: forms [...]> ];
"tzap_87" [label=<AddSystemMessage (87) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_88" [label=<AddSystemMessage (88) <br/>Message:<br/>Role:system<br/>Content:<br/>####embedding from file: route [...]> ];
"tzap_89" [label=<ApplyWorkflow (SearchWorkflow) End (89) > ];
"tzap_90" [label=<AddUserMessage (90) <br/>Message:<br/>Role:user<br/>Content:<br/>When a user submits, the inter [...]> ];
"tzap_91" [label=<AddAssistantMessage (91) <br/>Message:<br/>Role:assistant<br/>Content:<br/>Sure thing! One way to achieve [...]> ];
"tzap_92" [label=<AddUserMessage (92) <br/>Message:<br/>Role:user<br/>Content:<br/>I&#39;ve added confirm_message.py  [...]> ];
"tzap_1" -> "tzap_2";
"tzap_2" -> "tzap_3";
"tzap_3" -> "tzap_4";
"tzap_4" -> "tzap_5";
"tzap_5" -> "tzap_6";
"tzap_5" -> "tzap_7";
"tzap_7" -> "tzap_8";
"tzap_8" -> "tzap_9";
"tzap_9" -> "tzap_10";
"tzap_10" -> "tzap_11";
"tzap_11" -> "tzap_12";
"tzap_12" -> "tzap_13";
"tzap_13" -> "tzap_14";
"tzap_14" -> "tzap_15";
"tzap_15" -> "tzap_16";
"tzap_16" -> "tzap_17";
"tzap_17" -> "tzap_18";
"tzap_18" -> "tzap_19";
"tzap_19" -> "tzap_20";
"tzap_20" -> "tzap_21";
"tzap_21" -> "tzap_22";
"tzap_22" -> "tzap_23";
"tzap_23" -> "tzap_24";
"tzap_24" -> "tzap_25";
"tzap_25" -> "tzap_26";
"tzap_26" -> "tzap_27";
"tzap_27" -> "tzap_28";
"tzap_28" -> "tzap_29";
"tzap_29" -> "tzap_30";
"tzap_29" -> "tzap_31";
"tzap_31" -> "tzap_32";
"tzap_32" -> "tzap_33";
"tzap_33" -> "tzap_34";
"tzap_34" -> "tzap_35";
"tzap_35" -> "tzap_36";
"tzap_36" -> "tzap_37";
"tzap_37" -> "tzap_38";
"tzap_38" -> "tzap_39";
"tzap_39" -> "tzap_40";
"tzap_40" -> "tzap_41";
"tzap_41" -> "tzap_42";
"tzap_42" -> "tzap_43";
"tzap_43" -> "tzap_44";
"tzap_44" -> "tzap_45";
"tzap_45" -> "tzap_46";
"tzap_46" -> "tzap_47";
"tzap_2" -> "tzap_48";
"tzap_48" -> "tzap_49";
"tzap_49" -> "tzap_50";
"tzap_50" -> "tzap_51";
"tzap_50" -> "tzap_52";
"tzap_52" -> "tzap_53";
"tzap_53" -> "tzap_54";
"tzap_54" -> "tzap_55";
"tzap_55" -> "tzap_56";
"tzap_56" -> "tzap_57";
"tzap_57" -> "tzap_58";
"tzap_58" -> "tzap_59";
"tzap_59" -> "tzap_60";
"tzap_60" -> "tzap_61";
"tzap_61" -> "tzap_62";
"tzap_62" -> "tzap_63";
"tzap_63" -> "tzap_64";
"tzap_64" -> "tzap_65";
"tzap_65" -> "tzap_66";
"tzap_66" -> "tzap_67";
"tzap_67" -> "tzap_68";
"tzap_68" -> "tzap_69";
"tzap_69" -> "tzap_70";
"tzap_70" -> "tzap_71";
"tzap_71" -> "tzap_72";
"tzap_72" -> "tzap_73";
"tzap_73" -> "tzap_74";
"tzap_74" -> "tzap_75";
"tzap_74" -> "tzap_76";
"tzap_76" -> "tzap_77";
"tzap_77" -> "tzap_78";
"tzap_78" -> "tzap_79";
"tzap_79" -> "tzap_80";
"tzap_80" -> "tzap_81";
"tzap_81" -> "tzap_82";
"tzap_82" -> "tzap_83";
"tzap_83" -> "tzap_84";
"tzap_84" -> "tzap_85";
"tzap_85" -> "tzap_86";
"tzap_86" -> "tzap_87";
"tzap_87" -> "tzap_88";
"tzap_88" -> "tzap_89";
"tzap_89" -> "tzap_90";
"tzap_90" -> "tzap_91";
"tzap_91" -> "tzap_92";
"tzap_33" -> "chat_0_msg_0" [style=dotted];
"tzap_34" -> "chat_0_msg_1" [style=dotted];
"chat_0_msg_0" -> "chat_0_msg_1" [style=dotted];
"tzap_35" -> "chat_0_msg_2" [style=dotted];
"chat_0_msg_1" -> "chat_0_msg_2" [style=dotted];
"tzap_36" -> "chat_0_msg_3" [style=dotted];
"chat_0_msg_2" -> "chat_0_msg_3" [style=dotted];
"tzap_37" -> "chat_0_msg_4" [style=dotted];
"chat_0_msg_3" -> "chat_0_msg_4" [style=dotted];
"tzap_38" -> "chat_0_msg_5" [style=dotted];
"chat_0_msg_4" -> "chat_0_msg_5" [style=dotted];
"tzap_39" -> "chat_0_msg_6" [style=dotted];
"chat_0_msg_5" -> "chat_0_msg_6" [style=dotted];
"tzap_40" -> "chat_0_msg_7" [style=dotted];
"chat_0_msg_6" -> "chat_0_msg_7" [style=dotted];
"tzap_41" -> "chat_0_msg_8" [style=dotted];
"chat_0_msg_7" -> "chat_0_msg_8" [style=dotted];
"tzap_42" -> "chat_0_msg_9" [style=dotted];
"chat_0_msg_8" -> "chat_0_msg_9" [style=dotted];
"chat_0_msg_10" -> "tzap_44" [style=dotted];
"chat_0_msg_9" -> "chat_0_msg_10" [style=dotted];
"tzap_78" -> "chat_1_msg_0" [style=dotted];
"tzap_79" -> "chat_1_msg_1" [style=dotted];
"chat_1_msg_0" -> "chat_1_msg_1" [style=dotted];
"tzap_80" -> "chat_1_msg_2" [style=dotted];
"chat_1_msg_1" -> "chat_1_msg_2" [style=dotted];
"tzap_81" -> "chat_1_msg_3" [style=dotted];
"chat_1_msg_2" -> "chat_1_msg_3" [style=dotted];
"tzap_82" -> "chat_1_msg_4" [style=dotted];
"chat_1_msg_3" -> "chat_1_msg_4" [style=dotted];
"tzap_83" -> "chat_1_msg_5" [style=dotted];
"chat_1_msg_4" -> "chat_1_msg_5" [style=dotted];
"tzap_84" -> "chat_1_msg_6" [style=dotted];
"chat_1_msg_5" -> "chat_1_msg_6" [style=dotted];
"tzap_85" -> "chat_1_msg_7" [style=dotted];
"chat_1_msg_6" -> "chat_1_msg_7" [style=dotted];
"tzap_86" -> "chat_1_msg_8" [style=dotted];
"chat_1_msg_7" -> "chat_1_msg_8" [style=dotted];
"tzap_87" -> "chat_1_msg_9" [style=dotted];
"chat_1_msg_8" -> "chat_1_msg_9" [style=dotted];
"tzap_88" -> "chat_1_msg_10" [style=dotted];
"chat_1_msg_9" -> "chat_1_msg_10" [style=dotted];
"tzap_90" -> "chat_1_msg_11" [style=dotted];
"chat_1_msg_10" -> "chat_1_msg_11" [style=dotted];
"tzap_91" -> "chat_1_msg_12" [style=dotted];
"chat_1_msg_11" -> "chat_1_msg_12" [style=dotted];
"chat_1_msg_13" -> "tzap_92" [style=dotted];
"chat_1_msg_12" -> "chat_1_msg_13" [style=dotted];

	subgraph cluster_chat_0 {
		label = "GPT Chat(0):";
		bgcolor = "#333333";

	subgraph cluster_chat_0_REQUEST {
		label = "REQUEST";
		bgcolor = "#333333";
		"chat_0_msg_0" [label=<Message Tokens(11) (0):<br/>Role: system<br/>The following file contents are embeddings for the user input:> , tooltip=<The following file contents are embeddings for the user input:> ];
		"chat_0_msg_1" [label=<Message Tokens(221) (1):<br/>Role: system<br/>####embedding from file: routes/interaction.py<br/>        form = InteractionForm()<br/><br/>        # When the form is submitted<br/>        if form.validate_on_submit():<br/>            <br/>            # The CSV file should have a header row and the following columns:<br/>            # - Recipient Name: The name of the reci> , tooltip=<####embedding from file: routes/interaction.py
        form = InteractionForm()

        # When the form is submitted
        if form.validate_on_submit():
            
            # The CSV file should have a header row and the following columns:
            # - Recipient Name: The name of the recipient
            # - Recipient Information: Additional information about the recipient (facts about the recipient, etc.)
            # - Phone Number: The phone number of the recipient (in E.164 format)
            # Example:
            # Recipient Name,Recipient Information,Phone Number
            # John Doe,John has never voted as a tech enthusist who lives in GA,+14155552671
            # Jane Smith,Jane has recently become a US citizen and cares about animal rights,jane.smith@example.com,+14155552672
            
            # If a CSV file was uploaded
            if &#39;recipient_csv&#39; in request.files:

                # Read the CSV data from the uploaded file
                file = form.recipient_csv.data
                text_file> ];
		"chat_0_msg_2" [label=<Message Tokens(431) (2):<br/>Role: system<br/>####embedding from file: routes/interaction.py<br/>_phone_number=recipient_phone_number,<br/>            recipient_information=recipient_information)<br/>        db.session.add(recipient)<br/><br/>    # Check if sender with this name is in database<br/>    sender = Sender.query.filter_by(<br/>        sender_name=form.sender_na> , tooltip=<####embedding from file: routes/interaction.py
_phone_number=recipient_phone_number,
            recipient_information=recipient_information)
        db.session.add(recipient)

    # Check if sender with this name is in database
    sender = Sender.query.filter_by(
        sender_name=form.sender_name.data).first()

    if not sender:
        sender = Sender(
            sender_name=form.sender_name.data,
            sender_information=form.sender_information.data,
            sender_phone_number=form.sender_phone_number.data)
        db.session.add(sender)

    # Check if campaign with this name is in database
    campaign = Campaign.query.filter_by(
        campaign_name=form.campaign_name.data).first()

    if not campaign:
        campaign = Campaign(
            campaign_name=form.campaign_name.data,
            campaign_information=form.campaign_information.data,
            campaign_end_date=form.campaign_end_date.data)
        db.session.add(campaign)

    interaction_type = form.interaction_type.data

    # Create the Interaction
    interaction = Interaction(
        twilio_conversation_sid=&#39;&#39;,  #> ];
		"chat_0_msg_3" [label=<Message Tokens(641) (3):<br/>Role: system<br/>####embedding from file: routes/interaction.py<br/>_phone_number<br/>    sender_number = interaction.sender.sender_phone_number<br/><br/>    # Pre-create the first response<br/>    conversation = initialize_conversation(system_prompt)<br/>    interaction.conversation = conversation<br/>    initial_statement = add_llm_response_> , tooltip=<####embedding from file: routes/interaction.py
_phone_number
    sender_number = interaction.sender.sender_phone_number

    # Pre-create the first response
    conversation = initialize_conversation(system_prompt)
    interaction.conversation = conversation
    initial_statement = add_llm_response_to_conversation(interaction)
    print(\&#34;Interaction created successfully\&#34;)

    db.session.commit()

    # Log the system prompt and user number
    print(\&#34;Interaction Type: %s\&#34;, interaction_type)
    print(f\&#34;System prompt: system_prompt\&#34;)
    print(f\&#34;User number: user_number\&#34;)
    print(f\&#34;Sender number: sender_number\&#34;)
    print(f\&#34;Initial Statement: initial_statement\&#34;)
    print(f\&#34;Conversation: conversation\&#34;)

    # Store data in session
    session[&#39;interaction_id&#39;] = interaction.id  # Store the interaction ID

    if interaction_type == \&#34;call\&#34;:
        # Call the recipient
        print(\&#34;Redirecting to call route...\&#34;)
        call(interaction_id=interaction.id> ];
		"chat_0_msg_4" [label=<Message Tokens(975) (4):<br/>Role: system<br/>####embedding from file: forms/interaction_form.py<br/>from flask_wtf import FlaskForm<br/>from wtforms import StringField, SubmitField, DateField, SelectField, FileField<br/>from wtforms.validators import DataRequired, Regexp<br/>from wtforms import TextAreaField<br/>from models.models import InteractionType, AVAILABL> , tooltip=<####embedding from file: forms/interaction_form.py
from flask_wtf import FlaskForm
from wtforms import StringField, SubmitField, DateField, SelectField, FileField
from wtforms.validators import DataRequired, Regexp
from wtforms import TextAreaField
from models.models import InteractionType, AVAILABLE_PHONE_NUMBERS

# Define a custom validator for phone numbers that match \&#34;+17066641258\&#34;
class PhoneNumberValidator(Regexp):

    def __init__(self):
        super().__init__(
            # The regular expression to match phone numbers
            r&#39;^\\+[1-9]\\d10$&#39;,
            # The error message to display if the phone number is invalid
            message=
            &#39;The phone number must be in the format +######### with the country code included&#39;
        )


class InteractionForm(FlaskForm):
    campaign_name = StringField(&#39;Campaign Name&#39;, validators=[DataRequired()])
    campaign_information = TextAreaField(&#39;Campaign Information&#39;,
                                     validators=[DataRequired()])
    sender_name = StringField(&#39;Sender Name&#39;, validators=[DataRequired()])
    sender_information = TextAreaField(&#39;Sender Information&#39;,
                                          validators=[DataRequired()])
    sender_phone_number = SelectField(&#39;Sender Number&#39;, choices=[(number, number) for number in AVAILABLE_PHONE_NUMBERS], validators=[DataRequired()])
    campaign_end_date = DateField(&#39;End Date&#39;, validators=[DataRequired()])
    interaction_type = SelectField(&#39;Interaction Type&#39;,
                                   choices=InteractionType.choices(),
                                    validators=[DataRequired()])

    recipient_csv = FileField(&#39;Upload Recipients CSV&#39;)  # This is the new field for uploading CSVs

    submit = SubmitField(&#39;Submit&#39;)> ];
		"chat_0_msg_5" [label=<Message Tokens(1187) (5):<br/>Role: system<br/>####embedding from file: routes/twilio_message.py<br/>from flask import Blueprint<br/># import Flask and other libraries<br/>from flask import request, jsonify<br/>from models.models import Recipient, Sender, Campaign, Interaction<br/>from prompts.campaign_volunteer_agent import get_campaign_text_message_system_prompt<br/>> , tooltip=<####embedding from file: routes/twilio_message.py
from flask import Blueprint
# import Flask and other libraries
from flask import request, jsonify
from models.models import Recipient, Sender, Campaign, Interaction
from prompts.campaign_volunteer_agent import get_campaign_text_message_system_prompt
from tools.utility import add_message_to_conversation, add_llm_response_to_conversation, initialize_conversation
from logs.logger import logging
from datetime import date, timedelta
from context.database import db
from context.apis import client, twilio_number


twilio_message_bp = Blueprint(&#39;twilio_message&#39;, __name__)

@twilio_message_bp.route(\&#34;/twilio_message\&#34;, methods=[&#39;POST&#39;])
def twilio_message():
    print(request.get_data())

    # Get the &#39;From&#39; number from the incoming request
    from_number = request.values.get(&#39;From&#39;, None)
    sender_phone_number = request.values.get(&#39;To&#39;, None)

    # Use the &#39;From&#39; number to look up the recipient in your database
    recipient = Recipient> ];
		"chat_0_msg_6" [label=<Message Tokens(1400) (6):<br/>Role: system<br/>####embedding from file: prompts/campaign_volunteer_agent.py<br/> by with an engaging message that helps you accomplish your goal. Do not reveal that you are an AI bot.<br/>&#39;&#39;&#39;<br/><br/><br/>    system_message_prompt = SystemMessagePromptTemplate.from_template(<br/>        system_prompt)<br/><br/>    chat_prompt = Chat> , tooltip=<####embedding from file: prompts/campaign_volunteer_agent.py
 by with an engaging message that helps you accomplish your goal. Do not reveal that you are an AI bot.
&#39;&#39;&#39;


    system_message_prompt = SystemMessagePromptTemplate.from_template(
        system_prompt)

    chat_prompt = ChatPromptTemplate.from_messages([system_message_prompt])

    output = chat_prompt.format(
        recipient_name=interaction.recipient.recipient_name,
        campaign_name=interaction.campaign.campaign_name,
        campaign_end_date=interaction.campaign.campaign_end_date,
        sender_name=interaction.sender.sender_name,
        recipient_information=interaction.recipient.recipient_information,
        campaign_information=interaction.campaign.campaign_information,
        sender_information=interaction.sender.sender_information)

    return output


def get_campaign_text_message_system_prompt(interaction: Interaction):
    # GPT API System Prompts
    system_prompt = &#39;&#39;&#39;You are a helpful agent reaching out to recipient_name on behalf of sender_name Keep your comments short, but welcoming. Please respond with 1 or > ];
		"chat_0_msg_7" [label=<Message Tokens(1612) (7):<br/>Role: system<br/>####embedding from file: prompts/communication_review_agent.py<br/>from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate<br/>from models.models import Interaction<br/><br/><br/>def get_campaign_phone_call_system_prompt(interaction: Interaction):<br/>    # GPT API System Prompts<br/>    system_prompt = &> , tooltip=<####embedding from file: prompts/communication_review_agent.py
from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate
from models.models import Interaction


def get_campaign_phone_call_system_prompt(interaction: Interaction):
    # GPT API System Prompts
    system_prompt = &#39;&#39;&#39;You are a helpful agent reaching out to recipient_name on behalf of sender_name Keep your comments short, but welcoming. Please respond with 1 or 2 sentences and be brief. Your responses should be concise, informative, and engaging. If the recipient is losing interest in the conversation or has no more questions, include \&#34;goodbye\&#34; in your response to mark the end of the communication.

The sender wants you to reach out to the recipient for the following reason:
campaign_information

The campaign is going to end on you can reach out to the recipient until campaign_end_date.

You know the following about the sender of the message:
sender_information

You know the following about the recipient of the message:
recipient_information

Begin> ];
		"chat_0_msg_8" [label=<Message Tokens(1822) (8):<br/>Role: system<br/>####embedding from file: routes/text_message.py<br/>from flask import Blueprint<br/># import Flask and other libraries<br/>from flask import render_template, jsonify<br/>from forms.interaction_form import InteractionForm<br/>from models.models import Recipient, Interaction, Sender<br/>from logs.logger import logger, loggin> , tooltip=<####embedding from file: routes/text_message.py
from flask import Blueprint
# import Flask and other libraries
from flask import render_template, jsonify
from forms.interaction_form import InteractionForm
from models.models import Recipient, Interaction, Sender
from logs.logger import logger, logging
from context.database import db
from context.apis import client, twilio_number

text_message_bp = Blueprint(&#39;text_message&#39;, __name__)


@text_message_bp.route(\&#34;/text_message/\&lt;interaction_id\&gt;\&#34;, methods=[&#39;POST&#39;])
def text_message(interaction_id):
    try:
        text_thread = db.session.query(Interaction).get(interaction_id)

        if text_thread:
            recipient = Recipient.query.get(text_thread.recipient_id)
            sender = Sender.query.get(text_thread.sender_id)
            conversation = text_thread.conversation

            print(
                f\&#34;Texting route recieved Conversation: conversation\&#34;)

            body = conversation[-1].get(&#39;content&#39;)

            print(
                f\&#34;Starting text message with body&#39;body&#39; and user number> ];
		"chat_0_msg_9" [label=<Message Tokens(1849) (9):<br/>Role: system<br/>####embedding from file: routes/text_message.py<br/>_template(&#39;interaction.html&#39;,<br/>                               form=InteractionForm(),<br/>                               last_action=\&#34;Error\&#34;)<br/><br/>> , tooltip=<####embedding from file: routes/text_message.py
_template(&#39;interaction.html&#39;,
                               form=InteractionForm(),
                               last_action=\&#34;Error\&#34;)

> ];
	}

	subgraph cluster_chat_0_RESPONSE {
		label = "RESPONSE";
		bgcolor = "#333333";
		"chat_0_msg_10" [label=<Message Tokens(20) (10):<br/>Role: user<br/>When a user submits, the interaction form, allow them to confirm the first message before it is sent> , tooltip=<When a user submits, the interaction form, allow them to confirm the first message before it is sent> ];
	}
	}

	subgraph cluster_chat_1 {
		label = "GPT Chat(1):";
		bgcolor = "#333333";

	subgraph cluster_chat_1_REQUEST {
		label = "REQUEST";
		bgcolor = "#333333";
		"chat_1_msg_0" [label=<Message Tokens(11) (0):<br/>Role: system<br/>The following file contents are embeddings for the user input:> , tooltip=<The following file contents are embeddings for the user input:> ];
		"chat_1_msg_1" [label=<Message Tokens(223) (1):<br/>Role: system<br/>####embedding from file: tools/campaign_worker_tools.py<br/>\&#34;)<br/><br/>        first_message = add_llm_response_to_conversation(new_texting_thread)<br/><br/>        updated_conversation = add_message_to_conversation(new_texting_thread, first_message)<br/><br/>        new_texting_thread.conversation = updated_conversation> , tooltip=<####embedding from file: tools/campaign_worker_tools.py
\&#34;)

        first_message = add_llm_response_to_conversation(new_texting_thread)

        updated_conversation = add_message_to_conversation(new_texting_thread, first_message)

        new_texting_thread.conversation = updated_conversation

        print(f\&#34;First message: new_texting_thread.conversation\&#34;)
        db.session.add(new_texting_thread)
        db.session.commit()

        print(f\&#34;Texting thread id after db commit new_texting_thread.id\&#34;)

        new_texting_thread = db.session.query(Interaction).filter(
            Interaction.id == new_texting_thread.id).first()     
        # Include recipient_communication_id in the URL

        print(f\&#34;Texting with id: new_texting_thread.id\&#34;)
        print(f\&#34;Texting with conversation: new_texting_thread.conversation\&#34;)
        url = os.environ[&#39;BASE_URL&#39;] + f\&#34;text_message/new_texting_thread.id\&#34;

        response = requests.post(url)
        return f\&#34;> ];
		"chat_1_msg_2" [label=<Message Tokens(436) (2):<br/>Role: system<br/>####embedding from file: prompts/campaign_volunteer_agent.py<br/>from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate<br/>from models.models import Interaction<br/><br/>def get_campaign_phone_call_system_prompt(interaction: Interaction):<br/><br/>    # GPT API System Prompts<br/>    system_prompt = &#3> , tooltip=<####embedding from file: prompts/campaign_volunteer_agent.py
from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate
from models.models import Interaction

def get_campaign_phone_call_system_prompt(interaction: Interaction):

    # GPT API System Prompts
    system_prompt = &#39;&#39;&#39;You are a helpful agent reaching out to recipient_name on behalf of sender_name Keep your comments short, but welcoming. Please respond with 1 or 2 sentences and be brief. Your responses should be concise, informative, and engaging. If the recipient is losing interest in the conversation or has no more questions, include \&#34;goodbye\&#34; in your response to mark the end of the communication.

The sender wants you to reach out to the recipient for the following reason:
campaign_information

The campaign is going to end on you can reach out to the recipient until campaign_end_date.

You know the following about the sender of the message:
sender_information

You know the following about the recipient of the message:
recipient_information

Begin> ];
		"chat_1_msg_3" [label=<Message Tokens(643) (3):<br/>Role: system<br/>####embedding from file: routes/confirm_message.py<br/>from flask import request, Blueprint<br/># import Flask and other libraries<br/>from flask import render_template<br/>from models.models import Interaction<br/>from logs.logger import logging<br/># Import the functions from the other files<br/><br/>confirm_message_bp = Bluepri> , tooltip=<####embedding from file: routes/confirm_message.py
from flask import request, Blueprint
# import Flask and other libraries
from flask import render_template
from models.models import Interaction
from logs.logger import logging
# Import the functions from the other files

confirm_message_bp = Blueprint(&#39;confirm_message&#39;, __name__)

@confirm_message_bp.route(\&#34;/confirm_message/\&lt;interaction_id\&gt;\&#34;, methods=[&#39;GET&#39;, &#39;POST&#39;])
def confirm_message(interaction_id):
    interaction = Interaction.query.get(interaction_id)
    conversation = interaction.conversation
    system_prompt = conversation[-1][&#39;content&#39;]
    recipient_phone_number = interaction.recipient.recipient_phone_number

    if request.method == &#39;POST&#39;:
        send_message_body = conversation[-1][&#39;content&#39;]
        call_send_message_api(recipient_phone_number, send_message_body)
        print(f\&#34;Message sent: send_message_body\&#34;)
        return redirect(url_for(&#39;interaction.success&#39;))

    return render_template(&#39;confirm_message.html&#39;,
                           content=system_prompt,
                           interaction_id=interaction_id)> ];
		"chat_1_msg_4" [label=<Message Tokens(670) (4):<br/>Role: system<br/>####embedding from file: routes/text_message.py<br/>_template(&#39;interaction.html&#39;,<br/>                               form=InteractionForm(),<br/>                               last_action=\&#34;Error\&#34;)<br/><br/>> , tooltip=<####embedding from file: routes/text_message.py
_template(&#39;interaction.html&#39;,
                               form=InteractionForm(),
                               last_action=\&#34;Error\&#34;)

> ];
		"chat_1_msg_5" [label=<Message Tokens(880) (5):<br/>Role: system<br/>####embedding from file: routes/interaction.py<br/>        form = InteractionForm()<br/><br/>        # When the form is submitted<br/>        if form.validate_on_submit():<br/>            <br/>            # The CSV file should have a header row and the following columns:<br/>            # - Recipient Name: The name of the reci> , tooltip=<####embedding from file: routes/interaction.py
        form = InteractionForm()

        # When the form is submitted
        if form.validate_on_submit():
            
            # The CSV file should have a header row and the following columns:
            # - Recipient Name: The name of the recipient
            # - Recipient Information: Additional information about the recipient (facts about the recipient, etc.)
            # - Phone Number: The phone number of the recipient (in E.164 format)
            # Example:
            # Recipient Name,Recipient Information,Phone Number
            # John Doe,John has never voted as a tech enthusist who lives in GA,+14155552671
            # Jane Smith,Jane has recently become a US citizen and cares about animal rights,jane.smith@example.com,+14155552672
            
            # If a CSV file was uploaded
            if &#39;recipient_csv&#39; in request.files:

                # Read the CSV data from the uploaded file
                file = form.recipient_csv.data
                text_file> ];
		"chat_1_msg_6" [label=<Message Tokens(1090) (6):<br/>Role: system<br/>####embedding from file: routes/interaction.py<br/>_phone_number=recipient_phone_number,<br/>            recipient_information=recipient_information)<br/>        db.session.add(recipient)<br/><br/>    # Check if sender with this name is in database<br/>    sender = Sender.query.filter_by(<br/>        sender_name=form.sender_na> , tooltip=<####embedding from file: routes/interaction.py
_phone_number=recipient_phone_number,
            recipient_information=recipient_information)
        db.session.add(recipient)

    # Check if sender with this name is in database
    sender = Sender.query.filter_by(
        sender_name=form.sender_name.data).first()

    if not sender:
        sender = Sender(
            sender_name=form.sender_name.data,
            sender_information=form.sender_information.data,
            sender_phone_number=form.sender_phone_number.data)
        db.session.add(sender)

    # Check if campaign with this name is in database
    campaign = Campaign.query.filter_by(
        campaign_name=form.campaign_name.data).first()

    if not campaign:
        campaign = Campaign(
            campaign_name=form.campaign_name.data,
            campaign_information=form.campaign_information.data,
            campaign_end_date=form.campaign_end_date.data)
        db.session.add(campaign)

    interaction_type = form.interaction_type.data

    # Create the Interaction
    interaction = Interaction(
        twilio_conversation_sid=&#39;&#39;,  #> ];
		"chat_1_msg_7" [label=<Message Tokens(1300) (7):<br/>Role: system<br/>####embedding from file: routes/interaction.py<br/>_phone_number<br/>    sender_number = interaction.sender.sender_phone_number<br/><br/>    # Pre-create the first response<br/>    conversation = initialize_conversation(system_prompt)<br/>    interaction.conversation = conversation<br/>    initial_statement = add_llm_response_> , tooltip=<####embedding from file: routes/interaction.py
_phone_number
    sender_number = interaction.sender.sender_phone_number

    # Pre-create the first response
    conversation = initialize_conversation(system_prompt)
    interaction.conversation = conversation
    initial_statement = add_llm_response_to_conversation(interaction)
    print(\&#34;Interaction created successfully\&#34;)

    db.session.commit()

    # Log the system prompt and user number
    print(\&#34;Interaction Type: %s\&#34;, interaction_type)
    print(f\&#34;System prompt: system_prompt\&#34;)
    print(f\&#34;User number: user_number\&#34;)
    print(f\&#34;Sender number: sender_number\&#34;)
    print(f\&#34;Initial Statement: initial_statement\&#34;)
    print(f\&#34;Conversation: conversation\&#34;)

    # Store data in session
    session[&#39;interaction_id&#39;] = interaction.id  # Store the interaction ID

    if interaction_type == \&#34;call\&#34;:
        # Call the recipient
        print(\&#34;Redirecting to call route...\&#34;)
        call(interaction_id=interaction.id> ];
		"chat_1_msg_8" [label=<Message Tokens(1434) (8):<br/>Role: system<br/>####embedding from file: forms/interaction_form.py<br/>=[DataRequired()])<br/>    sender_information = TextAreaField(&#39;Sender Information&#39;,<br/>                                          validators=[DataRequired()])<br/>    sender_phone_number = SelectField(&#39;Sender Number&#39;, choices=[(number, number) f> , tooltip=<####embedding from file: forms/interaction_form.py
=[DataRequired()])
    sender_information = TextAreaField(&#39;Sender Information&#39;,
                                          validators=[DataRequired()])
    sender_phone_number = SelectField(&#39;Sender Number&#39;, choices=[(number, number) for number in AVAILABLE_PHONE_NUMBERS], validators=[DataRequired()])
    campaign_end_date = DateField(&#39;End Date&#39;, validators=[DataRequired()])
    interaction_type = SelectField(&#39;Interaction Type&#39;,
                                   choices=InteractionType.choices(),
                                    validators=[DataRequired()])

    recipient_csv = FileField(&#39;Upload Recipients CSV&#39;)  # This is the new field for uploading CSVs

    submit = SubmitField(&#39;Submit&#39;)> ];
		"chat_1_msg_9" [label=<Message Tokens(1646) (9):<br/>Role: system<br/>####embedding from file: routes/twilio_message.py<br/>from flask import Blueprint<br/># import Flask and other libraries<br/>from flask import request, jsonify<br/>from models.models import Recipient, Sender, Campaign, Interaction<br/>from prompts.campaign_volunteer_agent import get_campaign_text_message_system_prompt<br/>> , tooltip=<####embedding from file: routes/twilio_message.py
from flask import Blueprint
# import Flask and other libraries
from flask import request, jsonify
from models.models import Recipient, Sender, Campaign, Interaction
from prompts.campaign_volunteer_agent import get_campaign_text_message_system_prompt
from tools.utility import add_message_to_conversation, add_llm_response_to_conversation, initialize_conversation
from logs.logger import logging
from datetime import date, timedelta
from context.database import db
from context.apis import client, twilio_number


twilio_message_bp = Blueprint(&#39;twilio_message&#39;, __name__)

@twilio_message_bp.route(\&#34;/twilio_message\&#34;, methods=[&#39;POST&#39;])
def twilio_message():
    print(request.get_data())

    # Get the &#39;From&#39; number from the incoming request
    from_number = request.values.get(&#39;From&#39;, None)
    sender_phone_number = request.values.get(&#39;To&#39;, None)

    # Use the &#39;From&#39; number to look up the recipient in your database
    recipient = Recipient> ];
		"chat_1_msg_10" [label=<Message Tokens(1858) (10):<br/>Role: system<br/>####embedding from file: routes/twilio_message.py<br/>action)<br/>    else:<br/>        sender = Sender.query.filter_by(sender_phone_number=sender_phone_number).first()<br/>        # If the recipient exists, find the Interaction for this recipient with type &#39;text&#39;<br/>        interaction = Interaction.query.fil> , tooltip=<####embedding from file: routes/twilio_message.py
action)
    else:
        sender = Sender.query.filter_by(sender_phone_number=sender_phone_number).first()
        # If the recipient exists, find the Interaction for this recipient with type &#39;text&#39;
        interaction = Interaction.query.filter_by(
            recipient_id=recipient.id, sender_id=sender.id, interaction_type=&#39;text&#39;).first()

    # Now you can add the new message to the conversation
    message_body = request.values.get(&#39;Body&#39;, None)
    print(f\&#34;Recieved message body: message_body\&#34;)
    interaction.conversation = add_message_to_conversation(
        interaction, message_body)

    print(
        f\&#34;Conversation after including message: interaction.conversation\&#34;)
    # generate a new response from openAI to continue the conversation
    message_body = add_llm_response_to_conversation(interaction)
    print(f\&#34;AI message: message_body\&#34;)
    print(
        f\&#34;Conversation after adding LLM response: interaction.conversation\&#34;)

> ];
		"chat_1_msg_11" [label=<Message Tokens(1878) (11):<br/>Role: user<br/>When a user submits, the interaction form, allow them to confirm the first message before it is sent> , tooltip=<When a user submits, the interaction form, allow them to confirm the first message before it is sent> ];
		"chat_1_msg_12" [label=<Message Tokens(2328) (12):<br/>Role: assistant<br/>Sure thing! One way to achieve that is to add a confirmation page that displays the message before sending it. Here is one way to do it:<br/><br/>1. Create a new route in `routes.py` file that takes the `interaction_id` and displays the last message in the conversation for that interaction.<br/>2. In that route> , tooltip=<Sure thing! One way to achieve that is to add a confirmation page that displays the message before sending it. Here is one way to do it:

1. Create a new route in `routes.py` file that takes the `interaction_id` and displays the last message in the conversation for that interaction.
2. In that route function, retrieve the interaction and the message from the database.
3. Render a new template that displays the message and enables the user to confirm or go back to edit the message.
4. In the confirmation page template, include two buttons that will be used to either confirm or edit the message.
5. Once the user confirms the message, redirect to the `text_message` route and send the message.

Here&#39;s the updated code for `routes.py`:

```python
@interaction_bp.route(\&#34;/confirm_message/\&lt;interaction_id\&gt;\&#34;, methods=[&#39;GET&#39;, &#39;POST&#39;])
def confirm_message(interaction_id):
    interaction = Interaction.query.get(interaction_id)
    conversation = interaction.conversation
    system_prompt = conversation[-1][&#39;content&#39;]
    recipient_phone_number = interaction.recipient.recipient_phone_number

    if request.method == &#39;POST&#39;:
        send_message_body = conversation[-1][&#39;content&#39;]
        call_send_message_api(recipient_phone_number, send_message_body)
        print(f\&#34;Message sent: send_message_body\&#34;)
        return redirect(url_for(&#39;interaction.success&#39;))

    return render_template(&#39;confirm_message.html&#39;,
                           content=system_prompt,
                           interaction_id=interaction_id)
```

I&#39;ve added a confirmation template (`confirm_message.html`) that takes two inputs: `content` which is the message to be confirmed, and `interaction_id`. Here&#39;s the code for that template:

```html
% extends \&#34;base.html\&#34; %

% block content %
  \&lt;h1\&gt;Confirm Message\&lt;/h1\&gt;
  \&lt;p\&gt;Are you sure you want to send the following message?\&lt;/p\&gt;
  \&lt;p\&gt; content \&lt;/p\&gt;

  \&lt;form method=&#39;POST&#39;\&gt;
    \&lt;button type=&#39;submit&#39; name=&#39;confirm&#39; value=&#39;true&#39;\&gt;Send\&lt;/button\&gt;
    \&lt;button type=&#39;submit&#39; name=&#39;edit&#39; value=&#39;true&#39;\&gt;Edit\&lt;/button\&gt;
  \&lt;/form\&gt;
% endblock %
```> ];
	}

	subgraph cluster_chat_1_RESPONSE {
		label = "RESPONSE";
		bgcolor = "#333333";
		"chat_1_msg_13" [label=<Message Tokens(28) (13):<br/>Role: user<br/>I&#39;ve added confirm_message.py and the confirm_message.html. How do I trigger this confirmation on the Interaction page as I submit the form.> , tooltip=<I&#39;ve added confirm_message.py and the confirm_message.html. How do I trigger this confirmation on the Interaction page as I submit the form.> ];
	}
	}
}
